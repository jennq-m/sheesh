Lexical Analysis of syntax_file.shs:

Line 1: Lexeme: toptier         Token: TOPTIER
Line 1: Lexeme: (               Token: DELIM_O_PAREN
Line 1: Lexeme: )               Token: DELIM_C_PAREN
Line 1: Lexeme: {               Token: DELIM_O_BRACE
Line 2: Lexeme: (               Token: DELIM_O_PAREN
Line 2: Lexeme: expression      Token: IDENTIFIER
Line 2: Lexeme: )               Token: DELIM_C_PAREN
Line 2: Lexeme: ;               Token: DELIM_SEMCOL
Line 3: Lexeme: this            Token: IDENTIFIER
Line 3: Lexeme: ||              Token: ||
Line 3: Lexeme: that            Token: IDENTIFIER
Line 3: Lexeme: ;               Token: DELIM_SEMCOL
Line 4: Lexeme: this            Token: IDENTIFIER
Line 4: Lexeme: &&              Token: &&
Line 4: Lexeme: that            Token: IDENTIFIER
Line 4: Lexeme: ;               Token: DELIM_SEMCOL
Line 5: Lexeme: this            Token: IDENTIFIER
Line 5: Lexeme: ==              Token: ==
Line 5: Lexeme: that            Token: IDENTIFIER
Line 5: Lexeme: ;               Token: DELIM_SEMCOL
Line 6: Lexeme: this            Token: IDENTIFIER
Line 6: Lexeme: >=              Token: >=
Line 6: Lexeme: that            Token: IDENTIFIER
Line 6: Lexeme: ;               Token: DELIM_SEMCOL
Line 7: Lexeme: this            Token: IDENTIFIER
Line 7: Lexeme: +               Token: +
Line 7: Lexeme: that            Token: IDENTIFIER
Line 7: Lexeme: ;               Token: DELIM_SEMCOL
Line 8: Lexeme: this            Token: IDENTIFIER
Line 8: Lexeme: *               Token: *
Line 8: Lexeme: that            Token: IDENTIFIER
Line 8: Lexeme: ;               Token: DELIM_SEMCOL
Line 9: Lexeme: !               Token: !
Line 9: Lexeme: cap             Token: CONSTANT_LEGIT
Line 9: Lexeme: ;               Token: DELIM_SEMCOL
Line 10: Lexeme: i               Token: IDENTIFIER
Line 10: Lexeme: ++              Token: ++
Line 10: Lexeme: ;               Token: DELIM_SEMCOL
Line 11: Lexeme: test            Token: IDENTIFIER
Line 11: Lexeme: +=              Token: +=
Line 11: Lexeme: expression      Token: IDENTIFIER
Line 11: Lexeme: ;               Token: DELIM_SEMCOL
Line 13: Lexeme: //              Token: COMMENT
Line 14: Lexeme: input           Token: INPUT          
Line 14: Lexeme: (               Token: DELIM_O_PAREN
Line 14: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 14: Lexeme: ,               Token: DELIM_COMMA
Line 14: Lexeme: &               Token: &
Line 14: Lexeme: age             Token: IDENTIFIER
Line 14: Lexeme: )               Token: DELIM_C_PAREN
Line 14: Lexeme: ;               Token: DELIM_SEMCOL
Line 15: Lexeme: input           Token: INPUT          
Line 15: Lexeme: (               Token: DELIM_O_PAREN
Line 15: Lexeme: "%f"            Token: CONSTANT_TXTFS
Line 15: Lexeme: ,               Token: DELIM_COMMA
Line 15: Lexeme: &               Token: &
Line 15: Lexeme: float_a         Token: IDENTIFIER
Line 15: Lexeme: )               Token: DELIM_C_PAREN
Line 15: Lexeme: ;               Token: DELIM_SEMCOL
Line 16: Lexeme: input           Token: INPUT          
Line 16: Lexeme: (               Token: DELIM_O_PAREN
Line 16: Lexeme: "%s"            Token: CONSTANT_TXTFS
Line 16: Lexeme: ,               Token: DELIM_COMMA
Line 16: Lexeme: &               Token: &
Line 16: Lexeme: vibe_a          Token: IDENTIFIER
Line 16: Lexeme: )               Token: DELIM_C_PAREN
Line 16: Lexeme: ;               Token: DELIM_SEMCOL
Line 17: Lexeme: input           Token: INPUT          
Line 17: Lexeme: (               Token: DELIM_O_PAREN
Line 17: Lexeme: "%c"            Token: CONSTANT_TXTFS
Line 17: Lexeme: ,               Token: DELIM_COMMA
Line 17: Lexeme: &               Token: &
Line 17: Lexeme: letter          Token: IDENTIFIER
Line 17: Lexeme: )               Token: DELIM_C_PAREN
Line 17: Lexeme: ;               Token: DELIM_SEMCOL
Line 19: Lexeme: //              Token: COMMENT
Line 20: Lexeme: out             Token: OUTPUT         
Line 20: Lexeme: (               Token: DELIM_O_PAREN
Line 20: Lexeme: "String"        Token: CONSTANT_TEXT
Line 20: Lexeme: )               Token: DELIM_C_PAREN
Line 20: Lexeme: ;               Token: DELIM_SEMCOL
Line 21: Lexeme: out             Token: OUTPUT         
Line 21: Lexeme: (               Token: DELIM_O_PAREN
Line 21: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 21: Lexeme: ,               Token: DELIM_COMMA
Line 21: Lexeme: identifier      Token: IDENTIFIER
Line 21: Lexeme: )               Token: DELIM_C_PAREN
Line 21: Lexeme: ;               Token: DELIM_SEMCOL
Line 22: Lexeme: out             Token: OUTPUT         
Line 22: Lexeme: (               Token: DELIM_O_PAREN
Line 22: Lexeme: "Num: %d"       Token: CONSTANT_TXTFS
Line 22: Lexeme: ,               Token: DELIM_COMMA
Line 22: Lexeme: integer         Token: IDENTIFIER
Line 22: Lexeme: )               Token: DELIM_C_PAREN
Line 22: Lexeme: ;               Token: DELIM_SEMCOL
Line 24: Lexeme: out             Token: OUTPUT         
Line 24: Lexeme: (               Token: DELIM_O_PAREN
Line 24: Lexeme: "Age: %d"       Token: CONSTANT_TXTFS
Line 24: Lexeme: ,               Token: DELIM_COMMA
Line 24: Lexeme: age             Token: IDENTIFIER
Line 24: Lexeme: )               Token: DELIM_C_PAREN
Line 24: Lexeme: ;               Token: DELIM_SEMCOL
Line 25: Lexeme: out             Token: OUTPUT         
Line 25: Lexeme: (               Token: DELIM_O_PAREN
Line 25: Lexeme: "Float: %f"     Token: CONSTANT_TXTFS
Line 25: Lexeme: ,               Token: DELIM_COMMA
Line 25: Lexeme: float_a         Token: IDENTIFIER
Line 25: Lexeme: )               Token: DELIM_C_PAREN
Line 25: Lexeme: ;               Token: DELIM_SEMCOL
Line 26: Lexeme: out             Token: OUTPUT         
Line 26: Lexeme: (               Token: DELIM_O_PAREN
Line 26: Lexeme: "Text: %s"      Token: CONSTANT_TXTFS
Line 26: Lexeme: ,               Token: DELIM_COMMA
Line 26: Lexeme: text_a          Token: IDENTIFIER
Line 26: Lexeme: )               Token: DELIM_C_PAREN
Line 26: Lexeme: ;               Token: DELIM_SEMCOL
Line 27: Lexeme: out             Token: OUTPUT         
Line 27: Lexeme: (               Token: DELIM_O_PAREN
Line 27: Lexeme: "Letter: %c"    Token: CONSTANT_TXTFS
Line 27: Lexeme: ,               Token: DELIM_COMMA
Line 27: Lexeme: letter          Token: IDENTIFIER
Line 27: Lexeme: )               Token: DELIM_C_PAREN
Line 27: Lexeme: ;               Token: DELIM_SEMCOL
Line 29: Lexeme: //              Token: COMMENT
Line 30: Lexeme: decimal         Token: IDENTIFIER
Line 30: Lexeme: =               Token: =
Line 30: Lexeme: 89.70           Token: CONSTANT_DRIFT
Line 30: Lexeme: ;               Token: DELIM_SEMCOL
Line 31: Lexeme: count           Token: IDENTIFIER
Line 31: Lexeme: +=              Token: +=
Line 31: Lexeme: test_var        Token: IDENTIFIER
Line 31: Lexeme: ;               Token: DELIM_SEMCOL
Line 32: Lexeme: count           Token: IDENTIFIER
Line 32: Lexeme: *=              Token: *=
Line 32: Lexeme: test_var        Token: IDENTIFIER
Line 32: Lexeme: ;               Token: DELIM_SEMCOL
Line 33: Lexeme: count           Token: IDENTIFIER
Line 33: Lexeme: -=              Token: -=
Line 33: Lexeme: test_var        Token: IDENTIFIER
Line 33: Lexeme: ;               Token: DELIM_SEMCOL
Line 34: Lexeme: count           Token: IDENTIFIER
Line 34: Lexeme: |=              Token: |=
Line 34: Lexeme: test_var        Token: IDENTIFIER
Line 34: Lexeme: ;               Token: DELIM_SEMCOL
Line 35: Lexeme: count           Token: IDENTIFIER
Line 35: Lexeme: %=              Token: %=
Line 35: Lexeme: test_var        Token: IDENTIFIER
Line 35: Lexeme: ;               Token: DELIM_SEMCOL
Line 36: Lexeme: average         Token: IDENTIFIER
Line 36: Lexeme: =               Token: =
Line 36: Lexeme: (               Token: DELIM_O_PAREN
Line 36: Lexeme: math_grade      Token: IDENTIFIER
Line 36: Lexeme: +               Token: +
Line 36: Lexeme: science_grade   Token: IDENTIFIER
Line 36: Lexeme: +               Token: +
Line 36: Lexeme: english_grade   Token: IDENTIFIER
Line 36: Lexeme: )               Token: DELIM_C_PAREN
Line 36: Lexeme: /               Token: /
Line 36: Lexeme: 3               Token: CONSTANT_NUM
Line 36: Lexeme: ;               Token: DELIM_SEMCOL
Line 38: Lexeme: a               Token: IDENTIFIER
Line 38: Lexeme: =               Token: =
Line 38: Lexeme: b               Token: IDENTIFIER
Line 38: Lexeme: ;               Token: DELIM_SEMCOL
Line 39: Lexeme: a               Token: IDENTIFIER
Line 39: Lexeme: =               Token: =
Line 39: Lexeme: 8               Token: CONSTANT_NUM
Line 39: Lexeme: ;               Token: DELIM_SEMCOL
Line 40: Lexeme: a               Token: IDENTIFIER
Line 40: Lexeme: =               Token: =
Line 40: Lexeme: (               Token: DELIM_O_PAREN
Line 40: Lexeme: 8               Token: CONSTANT_NUM
Line 40: Lexeme: +               Token: +
Line 40: Lexeme: n               Token: IDENTIFIER
Line 40: Lexeme: *               Token: *
Line 40: Lexeme: (               Token: DELIM_O_PAREN
Line 40: Lexeme: c               Token: IDENTIFIER
Line 40: Lexeme: *               Token: *
Line 40: Lexeme: f               Token: IDENTIFIER
Line 40: Lexeme: )               Token: DELIM_C_PAREN
Line 40: Lexeme: ==              Token: ==
Line 40: Lexeme: 5               Token: CONSTANT_NUM
Line 40: Lexeme: )               Token: DELIM_C_PAREN
Line 40: Lexeme: ;               Token: DELIM_SEMCOL
Line 42: Lexeme: //              Token: COMMENT
Line 43: Lexeme: if              Token: IF             
Line 43: Lexeme: (               Token: DELIM_O_PAREN
Line 43: Lexeme: average         Token: IDENTIFIER
Line 43: Lexeme: >=              Token: >=
Line 43: Lexeme: 97.0            Token: CONSTANT_DRIFT
Line 43: Lexeme: )               Token: DELIM_C_PAREN
Line 43: Lexeme: {               Token: DELIM_O_BRACE
Line 44: Lexeme: out             Token: OUTPUT         
Line 44: Lexeme: (               Token: DELIM_O_PAREN
Line 44: Lexeme: "GWA is very high!" Token: CONSTANT_TEXT
Line 44: Lexeme: )               Token: DELIM_C_PAREN
Line 44: Lexeme: ;               Token: DELIM_SEMCOL
Line 45: Lexeme: }               Token: DELIM_C_BRACE
Line 47: Lexeme: if              Token: IF             
Line 47: Lexeme: (               Token: DELIM_O_PAREN
Line 47: Lexeme: average         Token: IDENTIFIER
Line 47: Lexeme: >=              Token: >=
Line 47: Lexeme: 1               Token: CONSTANT_NUM
Line 47: Lexeme: )               Token: DELIM_C_PAREN
Line 47: Lexeme: {               Token: DELIM_O_BRACE
Line 48: Lexeme: if              Token: IF             
Line 48: Lexeme: (               Token: DELIM_O_PAREN
Line 48: Lexeme: average         Token: IDENTIFIER
Line 48: Lexeme: <=              Token: <=
Line 48: Lexeme: 5               Token: CONSTANT_NUM
Line 48: Lexeme: )               Token: DELIM_C_PAREN
Line 48: Lexeme: {               Token: DELIM_O_BRACE
Line 49: Lexeme: out             Token: OUTPUT         
Line 49: Lexeme: (               Token: DELIM_O_PAREN
Line 49: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 49: Lexeme: ,               Token: DELIM_COMMA
Line 49: Lexeme: average         Token: IDENTIFIER
Line 49: Lexeme: )               Token: DELIM_C_PAREN
Line 49: Lexeme: ;               Token: DELIM_SEMCOL
Line 50: Lexeme: }               Token: DELIM_C_BRACE
Line 51: Lexeme: }               Token: DELIM_C_BRACE
Line 53: Lexeme: if              Token: IF             
Line 53: Lexeme: (               Token: DELIM_O_PAREN
Line 53: Lexeme: win             Token: IDENTIFIER
Line 53: Lexeme: ==              Token: ==
Line 53: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 53: Lexeme: )               Token: DELIM_C_PAREN
Line 53: Lexeme: {               Token: DELIM_O_BRACE
Line 54: Lexeme: out             Token: OUTPUT         
Line 54: Lexeme: (               Token: DELIM_O_PAREN
Line 54: Lexeme: "You won!"      Token: CONSTANT_TEXT
Line 54: Lexeme: )               Token: DELIM_C_PAREN
Line 54: Lexeme: ;               Token: DELIM_SEMCOL
Line 55: Lexeme: }               Token: DELIM_C_BRACE
Line 55: Lexeme: other           Token: OTHER          
Line 55: Lexeme: {               Token: DELIM_O_BRACE
Line 56: Lexeme: out             Token: OUTPUT         
Line 56: Lexeme: (               Token: DELIM_O_PAREN
Line 56: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 56: Lexeme: )               Token: DELIM_C_PAREN
Line 56: Lexeme: ;               Token: DELIM_SEMCOL
Line 57: Lexeme: }               Token: DELIM_C_BRACE
Line 59: Lexeme: if              Token: IF             
Line 59: Lexeme: (               Token: DELIM_O_PAREN
Line 59: Lexeme: win             Token: IDENTIFIER
Line 59: Lexeme: ==              Token: ==
Line 59: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 59: Lexeme: )               Token: DELIM_C_PAREN
Line 59: Lexeme: {               Token: DELIM_O_BRACE
Line 60: Lexeme: if              Token: IF             
Line 60: Lexeme: (               Token: DELIM_O_PAREN
Line 60: Lexeme: num_win         Token: IDENTIFIER
Line 60: Lexeme: >               Token: >
Line 60: Lexeme: 10              Token: CONSTANT_NUM
Line 60: Lexeme: )               Token: DELIM_C_PAREN
Line 60: Lexeme: {               Token: DELIM_O_BRACE
Line 61: Lexeme: out             Token: OUTPUT         
Line 61: Lexeme: (               Token: DELIM_O_PAREN
Line 61: Lexeme: "You've won for more than 10 times!" Token: CONSTANT_TEXT
Line 61: Lexeme: )               Token: DELIM_C_PAREN
Line 61: Lexeme: ;               Token: DELIM_SEMCOL
Line 62: Lexeme: }               Token: DELIM_C_BRACE
Line 62: Lexeme: other           Token: OTHER          
Line 62: Lexeme: {               Token: DELIM_O_BRACE
Line 63: Lexeme: out             Token: OUTPUT         
Line 63: Lexeme: (               Token: DELIM_O_PAREN
Line 63: Lexeme: "You have only won for 10 times!" Token: CONSTANT_TEXT
Line 63: Lexeme: )               Token: DELIM_C_PAREN
Line 63: Lexeme: ;               Token: DELIM_SEMCOL
Line 64: Lexeme: }               Token: DELIM_C_BRACE
Line 65: Lexeme: }               Token: DELIM_C_BRACE
Line 65: Lexeme: other           Token: OTHER          
Line 65: Lexeme: {               Token: DELIM_O_BRACE
Line 66: Lexeme: out             Token: OUTPUT         
Line 66: Lexeme: (               Token: DELIM_O_PAREN
Line 66: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 66: Lexeme: )               Token: DELIM_C_PAREN
Line 66: Lexeme: ;               Token: DELIM_SEMCOL
Line 67: Lexeme: }               Token: DELIM_C_BRACE
Line 69: Lexeme: //              Token: COMMENT
Line 70: Lexeme: rep             Token: REP            
Line 70: Lexeme: (               Token: DELIM_O_PAREN
Line 70: Lexeme: num             Token: NUM            
Line 70: Lexeme: a               Token: IDENTIFIER
Line 70: Lexeme: =               Token: =
Line 70: Lexeme: 0               Token: CONSTANT_NUM
Line 70: Lexeme: ;               Token: DELIM_SEMCOL
Line 70: Lexeme: a               Token: IDENTIFIER
Line 70: Lexeme: <               Token: <
Line 70: Lexeme: 5               Token: CONSTANT_NUM
Line 70: Lexeme: ;               Token: DELIM_SEMCOL
Line 70: Lexeme: a               Token: IDENTIFIER
Line 70: Lexeme: ++              Token: ++
Line 70: Lexeme: )               Token: DELIM_C_PAREN
Line 70: Lexeme: {               Token: DELIM_O_BRACE
Line 71: Lexeme: out             Token: OUTPUT         
Line 71: Lexeme: (               Token: DELIM_O_PAREN
Line 71: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 71: Lexeme: ,               Token: DELIM_COMMA
Line 71: Lexeme: a               Token: IDENTIFIER
Line 71: Lexeme: )               Token: DELIM_C_PAREN
Line 71: Lexeme: ;               Token: DELIM_SEMCOL
Line 72: Lexeme: }               Token: DELIM_C_BRACE
Line 74: Lexeme: rep             Token: REP            
Line 74: Lexeme: (               Token: DELIM_O_PAREN
Line 74: Lexeme: num             Token: NUM            
Line 74: Lexeme: i               Token: IDENTIFIER
Line 74: Lexeme: =               Token: =
Line 74: Lexeme: 0               Token: CONSTANT_NUM
Line 74: Lexeme: ;               Token: DELIM_SEMCOL
Line 74: Lexeme: i               Token: IDENTIFIER
Line 74: Lexeme: <               Token: <
Line 74: Lexeme: 5               Token: CONSTANT_NUM
Line 74: Lexeme: ;               Token: DELIM_SEMCOL
Line 74: Lexeme: i               Token: IDENTIFIER
Line 74: Lexeme: ++              Token: ++
Line 74: Lexeme: )               Token: DELIM_C_PAREN
Line 74: Lexeme: {               Token: DELIM_O_BRACE
Line 75: Lexeme: out             Token: OUTPUT         
Line 75: Lexeme: (               Token: DELIM_O_PAREN
Line 75: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 75: Lexeme: ,               Token: DELIM_COMMA
Line 75: Lexeme: i               Token: IDENTIFIER
Line 75: Lexeme: )               Token: DELIM_C_PAREN
Line 75: Lexeme: ;               Token: DELIM_SEMCOL
Line 76: Lexeme: rep             Token: REP            
Line 76: Lexeme: (               Token: DELIM_O_PAREN
Line 76: Lexeme: num             Token: NUM            
Line 76: Lexeme: j               Token: IDENTIFIER
Line 76: Lexeme: =               Token: =
Line 76: Lexeme: 0               Token: CONSTANT_NUM
Line 76: Lexeme: ;               Token: DELIM_SEMCOL
Line 76: Lexeme: j               Token: IDENTIFIER
Line 76: Lexeme: <               Token: <
Line 76: Lexeme: 5               Token: CONSTANT_NUM
Line 76: Lexeme: ;               Token: DELIM_SEMCOL
Line 76: Lexeme: j               Token: IDENTIFIER
Line 76: Lexeme: ++              Token: ++
Line 76: Lexeme: )               Token: DELIM_C_PAREN
Line 76: Lexeme: {               Token: DELIM_O_BRACE
Line 77: Lexeme: out             Token: OUTPUT         
Line 77: Lexeme: (               Token: DELIM_O_PAREN
Line 77: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 77: Lexeme: ,               Token: DELIM_COMMA
Line 77: Lexeme: j               Token: IDENTIFIER
Line 77: Lexeme: )               Token: DELIM_C_PAREN
Line 77: Lexeme: ;               Token: DELIM_SEMCOL
Line 78: Lexeme: }               Token: DELIM_C_BRACE
Line 79: Lexeme: }               Token: DELIM_C_BRACE
Line 81: Lexeme: num             Token: NUM            
Line 81: Lexeme: i               Token: IDENTIFIER
Line 81: Lexeme: =               Token: =
Line 81: Lexeme: 0               Token: CONSTANT_NUM
Line 81: Lexeme: ;               Token: DELIM_SEMCOL
Line 83: Lexeme: meanwhile       Token: MEANWHILE      
Line 83: Lexeme: (               Token: DELIM_O_PAREN
Line 83: Lexeme: i               Token: IDENTIFIER
Line 83: Lexeme: <               Token: <
Line 83: Lexeme: 5               Token: CONSTANT_NUM
Line 83: Lexeme: )               Token: DELIM_C_PAREN
Line 83: Lexeme: {               Token: DELIM_O_BRACE
Line 84: Lexeme: out             Token: OUTPUT         
Line 84: Lexeme: (               Token: DELIM_O_PAREN
Line 84: Lexeme: "string test"   Token: CONSTANT_TEXT
Line 84: Lexeme: )               Token: DELIM_C_PAREN
Line 84: Lexeme: ;               Token: DELIM_SEMCOL
Line 85: Lexeme: i               Token: IDENTIFIER
Line 85: Lexeme: ++              Token: ++
Line 85: Lexeme: ;               Token: DELIM_SEMCOL
Line 86: Lexeme: }               Token: DELIM_C_BRACE
Line 88: Lexeme: num             Token: NUM            
Line 88: Lexeme: i               Token: IDENTIFIER
Line 88: Lexeme: =               Token: =
Line 88: Lexeme: 0               Token: CONSTANT_NUM
Line 88: Lexeme: ;               Token: DELIM_SEMCOL
Line 89: Lexeme: num             Token: NUM            
Line 89: Lexeme: j               Token: IDENTIFIER
Line 89: Lexeme: ;               Token: DELIM_SEMCOL
Line 91: Lexeme: meanwhile       Token: MEANWHILE      
Line 91: Lexeme: (               Token: DELIM_O_PAREN
Line 91: Lexeme: i               Token: IDENTIFIER
Line 91: Lexeme: <               Token: <
Line 91: Lexeme: 5               Token: CONSTANT_NUM
Line 91: Lexeme: )               Token: DELIM_C_PAREN
Line 91: Lexeme: {               Token: DELIM_O_BRACE
Line 92: Lexeme: out             Token: OUTPUT         
Line 92: Lexeme: (               Token: DELIM_O_PAREN
Line 92: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 92: Lexeme: ,               Token: DELIM_COMMA
Line 92: Lexeme: identifier      Token: IDENTIFIER
Line 92: Lexeme: )               Token: DELIM_C_PAREN
Line 92: Lexeme: ;               Token: DELIM_SEMCOL
Line 93: Lexeme: j               Token: IDENTIFIER
Line 93: Lexeme: =               Token: =
Line 93: Lexeme: 0               Token: CONSTANT_NUM
Line 93: Lexeme: ;               Token: DELIM_SEMCOL
Line 94: Lexeme: meanwhile       Token: MEANWHILE      
Line 94: Lexeme: (               Token: DELIM_O_PAREN
Line 94: Lexeme: j               Token: IDENTIFIER
Line 94: Lexeme: <               Token: <
Line 94: Lexeme: 5               Token: CONSTANT_NUM
Line 94: Lexeme: )               Token: DELIM_C_PAREN
Line 94: Lexeme: {               Token: DELIM_O_BRACE
Line 95: Lexeme: out             Token: OUTPUT         
Line 95: Lexeme: (               Token: DELIM_O_PAREN
Line 95: Lexeme: "J: %d"         Token: CONSTANT_TXTFS
Line 95: Lexeme: ,               Token: DELIM_COMMA
Line 95: Lexeme: j               Token: IDENTIFIER
Line 95: Lexeme: )               Token: DELIM_C_PAREN
Line 95: Lexeme: ;               Token: DELIM_SEMCOL
Line 96: Lexeme: j               Token: IDENTIFIER
Line 96: Lexeme: ++              Token: ++
Line 96: Lexeme: ;               Token: DELIM_SEMCOL
Line 97: Lexeme: }               Token: DELIM_C_BRACE
Line 98: Lexeme: i               Token: IDENTIFIER
Line 98: Lexeme: ++              Token: ++
Line 98: Lexeme: ;               Token: DELIM_SEMCOL
Line 99: Lexeme: }               Token: DELIM_C_BRACE
Line 101: Lexeme: num             Token: NUM            
Line 101: Lexeme: i               Token: IDENTIFIER
Line 101: Lexeme: =               Token: =
Line 101: Lexeme: 0               Token: CONSTANT_NUM
Line 101: Lexeme: ;               Token: DELIM_SEMCOL
Line 103: Lexeme: do              Token: DO             
Line 103: Lexeme: {               Token: DELIM_O_BRACE
Line 104: Lexeme: out             Token: OUTPUT         
Line 104: Lexeme: (               Token: DELIM_O_PAREN
Line 104: Lexeme: "Test Output"   Token: CONSTANT_TEXT
Line 104: Lexeme: )               Token: DELIM_C_PAREN
Line 104: Lexeme: ;               Token: DELIM_SEMCOL
Line 105: Lexeme: i               Token: IDENTIFIER
Line 105: Lexeme: ++              Token: ++
Line 105: Lexeme: ;               Token: DELIM_SEMCOL
Line 106: Lexeme: }               Token: DELIM_C_BRACE
Line 106: Lexeme: meanwhile       Token: MEANWHILE      
Line 106: Lexeme: (               Token: DELIM_O_PAREN
Line 106: Lexeme: i               Token: IDENTIFIER
Line 106: Lexeme: <               Token: <
Line 106: Lexeme: 5               Token: CONSTANT_NUM
Line 106: Lexeme: )               Token: DELIM_C_PAREN
Line 106: Lexeme: ;               Token: DELIM_SEMCOL
Line 108: Lexeme: num             Token: NUM            
Line 108: Lexeme: i               Token: IDENTIFIER
Line 108: Lexeme: =               Token: =
Line 108: Lexeme: 0               Token: CONSTANT_NUM
Line 108: Lexeme: ;               Token: DELIM_SEMCOL
Line 109: Lexeme: num             Token: NUM            
Line 109: Lexeme: j               Token: IDENTIFIER
Line 109: Lexeme: =               Token: =
Line 109: Lexeme: 0               Token: CONSTANT_NUM
Line 109: Lexeme: ;               Token: DELIM_SEMCOL
Line 111: Lexeme: do              Token: DO             
Line 111: Lexeme: {               Token: DELIM_O_BRACE
Line 112: Lexeme: out             Token: OUTPUT         
Line 112: Lexeme: (               Token: DELIM_O_PAREN
Line 112: Lexeme: "This is an output statement" Token: CONSTANT_TEXT
Line 112: Lexeme: )               Token: DELIM_C_PAREN
Line 112: Lexeme: ;               Token: DELIM_SEMCOL
Line 113: Lexeme: j               Token: IDENTIFIER
Line 113: Lexeme: =               Token: =
Line 113: Lexeme: 0               Token: CONSTANT_NUM
Line 113: Lexeme: ;               Token: DELIM_SEMCOL
Line 114: Lexeme: do              Token: DO             
Line 114: Lexeme: {               Token: DELIM_O_BRACE
Line 115: Lexeme: out             Token: OUTPUT         
Line 115: Lexeme: (               Token: DELIM_O_PAREN
Line 115: Lexeme: "OUTPUT"        Token: CONSTANT_TEXT
Line 115: Lexeme: )               Token: DELIM_C_PAREN
Line 115: Lexeme: ;               Token: DELIM_SEMCOL
Line 116: Lexeme: j               Token: IDENTIFIER
Line 116: Lexeme: ++              Token: ++
Line 116: Lexeme: ;               Token: DELIM_SEMCOL
Line 117: Lexeme: }               Token: DELIM_C_BRACE
Line 117: Lexeme: meanwhile       Token: MEANWHILE      
Line 117: Lexeme: (               Token: DELIM_O_PAREN
Line 117: Lexeme: j               Token: IDENTIFIER
Line 117: Lexeme: <               Token: <
Line 117: Lexeme: 5               Token: CONSTANT_NUM
Line 117: Lexeme: )               Token: DELIM_C_PAREN
Line 117: Lexeme: ;               Token: DELIM_SEMCOL
Line 118: Lexeme: i               Token: IDENTIFIER
Line 118: Lexeme: ++              Token: ++
Line 118: Lexeme: ;               Token: DELIM_SEMCOL
Line 119: Lexeme: }               Token: DELIM_C_BRACE
Line 119: Lexeme: meanwhile       Token: MEANWHILE      
Line 119: Lexeme: (               Token: DELIM_O_PAREN
Line 119: Lexeme: i               Token: IDENTIFIER
Line 119: Lexeme: <               Token: <
Line 119: Lexeme: 5               Token: CONSTANT_NUM
Line 119: Lexeme: )               Token: DELIM_C_PAREN
Line 119: Lexeme: ;               Token: DELIM_SEMCOL
Line 122: Lexeme: rep             Token: REP            
Line 122: Lexeme: (               Token: DELIM_O_PAREN
Line 122: Lexeme: num             Token: NUM            
Line 122: Lexeme: a               Token: IDENTIFIER
Line 122: Lexeme: =               Token: =
Line 122: Lexeme: 1               Token: CONSTANT_NUM
Line 122: Lexeme: ;               Token: DELIM_SEMCOL
Line 122: Lexeme: a               Token: IDENTIFIER
Line 122: Lexeme: >               Token: >
Line 122: Lexeme: 1               Token: CONSTANT_NUM
Line 122: Lexeme: ;               Token: DELIM_SEMCOL
Line 122: Lexeme: a               Token: IDENTIFIER
Line 122: Lexeme: ++              Token: ++
Line 122: Lexeme: )               Token: DELIM_C_PAREN
Line 122: Lexeme: {               Token: DELIM_O_BRACE
Line 123: Lexeme: meanwhile       Token: MEANWHILE      
Line 123: Lexeme: (               Token: DELIM_O_PAREN
Line 123: Lexeme: i               Token: IDENTIFIER
Line 123: Lexeme: >               Token: >
Line 123: Lexeme: 10              Token: CONSTANT_NUM
Line 123: Lexeme: )               Token: DELIM_C_PAREN
Line 123: Lexeme: {               Token: DELIM_O_BRACE
Line 124: Lexeme: do              Token: DO             
Line 124: Lexeme: {               Token: DELIM_O_BRACE
Line 125: Lexeme: test            Token: IDENTIFIER
Line 125: Lexeme: =               Token: =
Line 125: Lexeme: test            Token: IDENTIFIER
Line 125: Lexeme: ;               Token: DELIM_SEMCOL
Line 126: Lexeme: }               Token: DELIM_C_BRACE
Line 126: Lexeme: meanwhile       Token: MEANWHILE      
Line 126: Lexeme: (               Token: DELIM_O_PAREN
Line 126: Lexeme: i               Token: IDENTIFIER
Line 126: Lexeme: <               Token: <
Line 126: Lexeme: 10              Token: CONSTANT_NUM
Line 126: Lexeme: )               Token: DELIM_C_PAREN
Line 126: Lexeme: ;               Token: DELIM_SEMCOL
Line 127: Lexeme: }               Token: DELIM_C_BRACE
Line 128: Lexeme: }               Token: DELIM_C_BRACE
Line 130: Lexeme: //              Token: COMMENT
Line 131: Lexeme: num             Token: NUM            
Line 131: Lexeme: count           Token: IDENTIFIER
Line 131: Lexeme: ;               Token: DELIM_SEMCOL
Line 132: Lexeme: drift           Token: DRIFT          
Line 132: Lexeme: decimal         Token: IDENTIFIER
Line 132: Lexeme: =               Token: =
Line 132: Lexeme: 89.70           Token: CONSTANT_DRIFT
Line 132: Lexeme: ;               Token: DELIM_SEMCOL
Line 133: Lexeme: num             Token: NUM            
Line 133: Lexeme: count           Token: IDENTIFIER
Line 133: Lexeme: =               Token: =
Line 133: Lexeme: number          Token: IDENTIFIER
Line 133: Lexeme: ;               Token: DELIM_SEMCOL
Line 134: Lexeme: drift           Token: DRIFT          
Line 134: Lexeme: math_grade      Token: IDENTIFIER
Line 134: Lexeme: ,               Token: DELIM_COMMA
Line 134: Lexeme: science_grade   Token: IDENTIFIER
Line 134: Lexeme: ,               Token: DELIM_COMMA
Line 134: Lexeme: english_grade   Token: IDENTIFIER
Line 134: Lexeme: ;               Token: DELIM_SEMCOL
Line 135: Lexeme: drift           Token: DRIFT          
Line 135: Lexeme: math_grade      Token: IDENTIFIER
Line 135: Lexeme: =               Token: =
Line 135: Lexeme: 97.5            Token: CONSTANT_DRIFT
Line 135: Lexeme: ,               Token: DELIM_COMMA
Line 135: Lexeme: science_grade   Token: IDENTIFIER
Line 135: Lexeme: =               Token: =
Line 135: Lexeme: 95.5            Token: CONSTANT_DRIFT
Line 135: Lexeme: ,               Token: DELIM_COMMA
Line 135: Lexeme: english_grade   Token: IDENTIFIER
Line 135: Lexeme: =               Token: =
Line 135: Lexeme: math_grade      Token: IDENTIFIER
Line 135: Lexeme: ;               Token: DELIM_SEMCOL
Line 137: Lexeme: u               Token: IDENTIFIER
Line 137: Lexeme: ++              Token: ++
Line 137: Lexeme: ;               Token: DELIM_SEMCOL
Line 138: Lexeme: ++              Token: ++
Line 138: Lexeme: u               Token: IDENTIFIER
Line 138: Lexeme: ;               Token: DELIM_SEMCOL
Line 140: Lexeme: if              Token: IF             
Line 140: Lexeme: (               Token: DELIM_O_PAREN
Line 140: Lexeme: win             Token: IDENTIFIER
Line 140: Lexeme: ==              Token: ==
Line 140: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 140: Lexeme: )               Token: DELIM_C_PAREN
Line 140: Lexeme: {               Token: DELIM_O_BRACE
Line 141: Lexeme: out             Token: OUTPUT         
Line 141: Lexeme: (               Token: DELIM_O_PAREN
Line 141: Lexeme: "You won!"      Token: CONSTANT_TEXT
Line 141: Lexeme: )               Token: DELIM_C_PAREN
Line 141: Lexeme: ;               Token: DELIM_SEMCOL
Line 142: Lexeme: }               Token: DELIM_C_BRACE
Line 142: Lexeme: ex              Token: EX             
Line 142: Lexeme: (               Token: DELIM_O_PAREN
Line 142: Lexeme: win             Token: IDENTIFIER
Line 142: Lexeme: ==              Token: ==
Line 142: Lexeme: cap             Token: CONSTANT_LEGIT
Line 142: Lexeme: )               Token: DELIM_C_PAREN
Line 142: Lexeme: {               Token: DELIM_O_BRACE
Line 143: Lexeme: out             Token: OUTPUT         
Line 143: Lexeme: (               Token: DELIM_O_PAREN
Line 143: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 143: Lexeme: )               Token: DELIM_C_PAREN
Line 143: Lexeme: ;               Token: DELIM_SEMCOL
Line 144: Lexeme: }               Token: DELIM_C_BRACE
Line 146: Lexeme: if              Token: IF             
Line 146: Lexeme: (               Token: DELIM_O_PAREN
Line 146: Lexeme: test            Token: IDENTIFIER
Line 146: Lexeme: )               Token: DELIM_C_PAREN
Line 146: Lexeme: {               Token: DELIM_O_BRACE
Line 147: Lexeme: test            Token: IDENTIFIER
Line 147: Lexeme: =               Token: =
Line 147: Lexeme: test            Token: IDENTIFIER
Line 147: Lexeme: ;               Token: DELIM_SEMCOL
Line 148: Lexeme: }               Token: DELIM_C_BRACE
Line 148: Lexeme: ex              Token: EX             
Line 148: Lexeme: (               Token: DELIM_O_PAREN
Line 148: Lexeme: test            Token: IDENTIFIER
Line 148: Lexeme: )               Token: DELIM_C_PAREN
Line 148: Lexeme: {               Token: DELIM_O_BRACE
Line 149: Lexeme: test            Token: IDENTIFIER
Line 149: Lexeme: =               Token: =
Line 149: Lexeme: test            Token: IDENTIFIER
Line 149: Lexeme: ;               Token: DELIM_SEMCOL
Line 150: Lexeme: }               Token: DELIM_C_BRACE
Line 150: Lexeme: ex              Token: EX             
Line 150: Lexeme: (               Token: DELIM_O_PAREN
Line 150: Lexeme: test            Token: IDENTIFIER
Line 150: Lexeme: )               Token: DELIM_C_PAREN
Line 150: Lexeme: {               Token: DELIM_O_BRACE
Line 151: Lexeme: test            Token: IDENTIFIER
Line 151: Lexeme: =               Token: =
Line 151: Lexeme: test            Token: IDENTIFIER
Line 151: Lexeme: ;               Token: DELIM_SEMCOL
Line 152: Lexeme: }               Token: DELIM_C_BRACE
Line 152: Lexeme: other           Token: OTHER          
Line 152: Lexeme: {               Token: DELIM_O_BRACE
Line 153: Lexeme: if              Token: IF             
Line 153: Lexeme: (               Token: DELIM_O_PAREN
Line 153: Lexeme: test            Token: IDENTIFIER
Line 153: Lexeme: )               Token: DELIM_C_PAREN
Line 153: Lexeme: {               Token: DELIM_O_BRACE
Line 154: Lexeme: hello           Token: IDENTIFIER
Line 154: Lexeme: ;               Token: DELIM_SEMCOL
Line 155: Lexeme: }               Token: DELIM_C_BRACE
Line 155: Lexeme: other           Token: OTHER          
Line 155: Lexeme: {               Token: DELIM_O_BRACE
Line 156: Lexeme: hello           Token: IDENTIFIER
Line 156: Lexeme: ;               Token: DELIM_SEMCOL
Line 157: Lexeme: }               Token: DELIM_C_BRACE
Line 158: Lexeme: }               Token: DELIM_C_BRACE
Line 160: Lexeme: num             Token: NUM            
Line 160: Lexeme: i               Token: IDENTIFIER
Line 160: Lexeme: ,               Token: DELIM_COMMA
Line 160: Lexeme: j               Token: IDENTIFIER
Line 160: Lexeme: =               Token: =
Line 160: Lexeme: 0               Token: CONSTANT_NUM
Line 160: Lexeme: ,               Token: DELIM_COMMA
Line 160: Lexeme: k               Token: IDENTIFIER
Line 160: Lexeme: =               Token: =
Line 160: Lexeme: 0               Token: CONSTANT_NUM
Line 160: Lexeme: ;               Token: DELIM_SEMCOL
Line 162: Lexeme: !               Token: !
Line 162: Lexeme: (               Token: DELIM_O_PAREN
Line 162: Lexeme: x               Token: IDENTIFIER
Line 162: Lexeme: )               Token: DELIM_C_PAREN
Line 162: Lexeme: ;               Token: DELIM_SEMCOL
Line 163: Lexeme: -               Token: -
Line 163: Lexeme: (               Token: DELIM_O_PAREN
Line 163: Lexeme: x               Token: IDENTIFIER
Line 163: Lexeme: +               Token: +
Line 163: Lexeme: y               Token: IDENTIFIER
Line 163: Lexeme: )               Token: DELIM_C_PAREN
Line 163: Lexeme: ;               Token: DELIM_SEMCOL
Line 165: Lexeme: }               Token: DELIM_C_BRACE
