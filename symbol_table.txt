Lexical Analysis of syntax_file.shs:

Line 1: Lexeme: toptier         Token: TOPTIER
Line 1: Lexeme: (               Token: DELIM_O_PAREN
Line 1: Lexeme: )               Token: DELIM_C_PAREN
Line 1: Lexeme: {               Token: DELIM_O_BRACE
Line 4: Lexeme: if              Token: IF             
Line 4: Lexeme: (               Token: DELIM_O_PAREN
Line 4: Lexeme: win             Token: IDENTIFIER
Line 4: Lexeme: ==              Token: ==
Line 4: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 4: Lexeme: )               Token: DELIM_C_PAREN
Line 4: Lexeme: {               Token: DELIM_O_BRACE
Line 5: Lexeme: out             Token: OUTPUT         
Line 5: Lexeme: (               Token: DELIM_O_PAREN
Line 5: Lexeme: "You won!"      Token: CONSTANT_TEXT
Line 5: Lexeme: )               Token: DELIM_C_PAREN
Line 5: Lexeme: ;               Token: DELIM_SEMCOL
Line 6: Lexeme: }               Token: DELIM_C_BRACE
Line 6: Lexeme: ex              Token: EX             
Line 6: Lexeme: (               Token: DELIM_O_PAREN
Line 6: Lexeme: win             Token: IDENTIFIER
Line 6: Lexeme: ==              Token: ==
Line 6: Lexeme: cap             Token: CONSTANT_LEGIT
Line 6: Lexeme: )               Token: DELIM_C_PAREN
Line 6: Lexeme: {               Token: DELIM_O_BRACE
Line 7: Lexeme: out             Token: OUTPUT         
Line 7: Lexeme: (               Token: DELIM_O_PAREN
Line 7: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 7: Lexeme: )               Token: DELIM_C_PAREN
Line 7: Lexeme: ;               Token: DELIM_SEMCOL
Line 8: Lexeme: }               Token: DELIM_C_BRACE
Line 10: Lexeme: if              Token: IF             
Line 10: Lexeme: (               Token: DELIM_O_PAREN
Line 10: Lexeme: test            Token: IDENTIFIER
Line 10: Lexeme: )               Token: DELIM_C_PAREN
Line 10: Lexeme: {               Token: DELIM_O_BRACE
Line 11: Lexeme: test            Token: IDENTIFIER
Line 11: Lexeme: =               Token: =
Line 11: Lexeme: test            Token: IDENTIFIER
Line 11: Lexeme: ;               Token: DELIM_SEMCOL
Line 12: Lexeme: }               Token: DELIM_C_BRACE
Line 12: Lexeme: ex              Token: EX             
Line 12: Lexeme: (               Token: DELIM_O_PAREN
Line 12: Lexeme: test            Token: IDENTIFIER
Line 12: Lexeme: )               Token: DELIM_C_PAREN
Line 12: Lexeme: {               Token: DELIM_O_BRACE
Line 13: Lexeme: test            Token: IDENTIFIER
Line 13: Lexeme: =               Token: =
Line 13: Lexeme: test            Token: IDENTIFIER
Line 13: Lexeme: ;               Token: DELIM_SEMCOL
Line 14: Lexeme: }               Token: DELIM_C_BRACE
Line 14: Lexeme: ex              Token: EX             
Line 14: Lexeme: (               Token: DELIM_O_PAREN
Line 14: Lexeme: test            Token: IDENTIFIER
Line 14: Lexeme: )               Token: DELIM_C_PAREN
Line 14: Lexeme: {               Token: DELIM_O_BRACE
Line 15: Lexeme: test            Token: IDENTIFIER
Line 15: Lexeme: =               Token: =
Line 15: Lexeme: test            Token: IDENTIFIER
Line 15: Lexeme: ;               Token: DELIM_SEMCOL
Line 16: Lexeme: }               Token: DELIM_C_BRACE
Line 16: Lexeme: other           Token: OTHER          
Line 16: Lexeme: {               Token: DELIM_O_BRACE
Line 17: Lexeme: if              Token: IF             
Line 17: Lexeme: (               Token: DELIM_O_PAREN
Line 17: Lexeme: test            Token: IDENTIFIER
Line 17: Lexeme: )               Token: DELIM_C_PAREN
Line 17: Lexeme: {               Token: DELIM_O_BRACE
Line 18: Lexeme: hello           Token: IDENTIFIER
Line 18: Lexeme: ;               Token: DELIM_SEMCOL
Line 19: Lexeme: }               Token: DELIM_C_BRACE
Line 19: Lexeme: other           Token: OTHER          
Line 19: Lexeme: {               Token: DELIM_O_BRACE
Line 20: Lexeme: hello           Token: IDENTIFIER
Line 20: Lexeme: ;               Token: DELIM_SEMCOL
Line 21: Lexeme: }               Token: DELIM_C_BRACE
Line 22: Lexeme: }               Token: DELIM_C_BRACE
Line 24: Lexeme: num             Token: NUM            
Line 24: Lexeme: i               Token: IDENTIFIER
Line 24: Lexeme: ,               Token: DELIM_COMMA
Line 24: Lexeme: j               Token: IDENTIFIER
Line 24: Lexeme: =               Token: =
Line 24: Lexeme: 0               Token: CONSTANT_NUM
Line 24: Lexeme: ,               Token: DELIM_COMMA
Line 24: Lexeme: k               Token: IDENTIFIER
Line 24: Lexeme: =               Token: =
Line 24: Lexeme: 0               Token: CONSTANT_NUM
Line 24: Lexeme: ;               Token: DELIM_SEMCOL
Line 26: Lexeme: !               Token: !
Line 26: Lexeme: (               Token: DELIM_O_PAREN
Line 26: Lexeme: x               Token: IDENTIFIER
Line 26: Lexeme: )               Token: DELIM_C_PAREN
Line 26: Lexeme: ;               Token: DELIM_SEMCOL
Line 27: Lexeme: -               Token: -
Line 27: Lexeme: (               Token: DELIM_O_PAREN
Line 27: Lexeme: x               Token: IDENTIFIER
Line 27: Lexeme: +               Token: +
Line 27: Lexeme: y               Token: IDENTIFIER
Line 27: Lexeme: )               Token: DELIM_C_PAREN
Line 27: Lexeme: ;               Token: DELIM_SEMCOL
Line 29: Lexeme: x               Token: IDENTIFIER
Line 29: Lexeme: =               Token: =
Line 29: Lexeme: y               Token: IDENTIFIER
Line 29: Lexeme: +=              Token: +=
Line 29: Lexeme: z               Token: IDENTIFIER
Line 29: Lexeme: ;               Token: DELIM_SEMCOL
Line 31: Lexeme: if              Token: IF             
Line 31: Lexeme: (               Token: DELIM_O_PAREN
Line 31: Lexeme: x               Token: IDENTIFIER
Line 31: Lexeme: )               Token: DELIM_C_PAREN
Line 31: Lexeme: {               Token: DELIM_O_BRACE
Line 32: Lexeme: ++              Token: ++
Line 32: Lexeme: y               Token: IDENTIFIER
Line 32: Lexeme: ;               Token: DELIM_SEMCOL
Line 33: Lexeme: }               Token: DELIM_C_BRACE
Line 34: Lexeme: }               Token: DELIM_C_BRACE
