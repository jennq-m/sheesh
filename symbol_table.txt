Lexical Analysis of syntax_file.shs:

Line 1: Lexeme: toptier         Token: TOPTIER
Line 1: Lexeme: (               Token: DELIM_O_PAREN
Line 1: Lexeme: )               Token: DELIM_C_PAREN
Line 1: Lexeme: {               Token: DELIM_O_BRACE
Line 2: Lexeme: rep             Token: REP            
Line 2: Lexeme: (               Token: DELIM_O_PAREN
Line 2: Lexeme: i               Token: IDENTIFIER
Line 2: Lexeme: =               Token: =
Line 2: Lexeme: 0               Token: CONSTANT_NUM
Line 2: Lexeme: ;               Token: DELIM_SEMCOL
Line 2: Lexeme: i               Token: IDENTIFIER
Line 2: Lexeme: >               Token: >
Line 2: Lexeme: 10              Token: CONSTANT_NUM
Line 2: Lexeme: ;               Token: DELIM_SEMCOL
Line 2: Lexeme: i               Token: IDENTIFIER
Line 2: Lexeme: +=              Token: +=
Line 2: Lexeme: i               Token: IDENTIFIER
Line 2: Lexeme: +               Token: +
Line 2: Lexeme: 1               Token: CONSTANT_NUM
Line 2: Lexeme: )               Token: DELIM_C_PAREN
Line 2: Lexeme: {               Token: DELIM_O_BRACE
Line 4: Lexeme: }               Token: DELIM_C_BRACE
Line 5: Lexeme: //              Token: COMMENT
Line 6: Lexeme: input           Token: INPUT          
Line 6: Lexeme: (               Token: DELIM_O_PAREN
Line 6: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 6: Lexeme: ,               Token: DELIM_COMMA
Line 6: Lexeme: &               Token: &
Line 6: Lexeme: age             Token: IDENTIFIER
Line 6: Lexeme: )               Token: DELIM_C_PAREN
Line 6: Lexeme: ;               Token: DELIM_SEMCOL
Line 7: Lexeme: input           Token: INPUT          
Line 7: Lexeme: (               Token: DELIM_O_PAREN
Line 7: Lexeme: "%f"            Token: CONSTANT_TXTFS
Line 7: Lexeme: ,               Token: DELIM_COMMA
Line 7: Lexeme: &               Token: &
Line 7: Lexeme: float_a         Token: IDENTIFIER
Line 7: Lexeme: )               Token: DELIM_C_PAREN
Line 7: Lexeme: ;               Token: DELIM_SEMCOL
Line 8: Lexeme: input           Token: INPUT          
Line 8: Lexeme: (               Token: DELIM_O_PAREN
Line 8: Lexeme: "%s"            Token: CONSTANT_TXTFS
Line 8: Lexeme: ,               Token: DELIM_COMMA
Line 8: Lexeme: &               Token: &
Line 8: Lexeme: vibe_a          Token: IDENTIFIER
Line 8: Lexeme: )               Token: DELIM_C_PAREN
Line 8: Lexeme: ;               Token: DELIM_SEMCOL
Line 9: Lexeme: input           Token: INPUT          
Line 9: Lexeme: (               Token: DELIM_O_PAREN
Line 9: Lexeme: "%c"            Token: CONSTANT_TXTFS
Line 9: Lexeme: ,               Token: DELIM_COMMA
Line 9: Lexeme: &               Token: &
Line 9: Lexeme: letter          Token: IDENTIFIER
Line 9: Lexeme: )               Token: DELIM_C_PAREN
Line 9: Lexeme: ;               Token: DELIM_SEMCOL
Line 11: Lexeme: //              Token: COMMENT
Line 12: Lexeme: out             Token: OUTPUT         
Line 12: Lexeme: (               Token: DELIM_O_PAREN
Line 12: Lexeme: "String"        Token: CONSTANT_TEXT
Line 12: Lexeme: )               Token: DELIM_C_PAREN
Line 12: Lexeme: ;               Token: DELIM_SEMCOL
Line 13: Lexeme: out             Token: OUTPUT         
Line 13: Lexeme: (               Token: DELIM_O_PAREN
Line 13: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 13: Lexeme: ,               Token: DELIM_COMMA
Line 13: Lexeme: identifier      Token: IDENTIFIER
Line 13: Lexeme: )               Token: DELIM_C_PAREN
Line 13: Lexeme: ;               Token: DELIM_SEMCOL
Line 14: Lexeme: out             Token: OUTPUT         
Line 14: Lexeme: (               Token: DELIM_O_PAREN
Line 14: Lexeme: "Num: %d"       Token: CONSTANT_TXTFS
Line 14: Lexeme: ,               Token: DELIM_COMMA
Line 14: Lexeme: integer         Token: IDENTIFIER
Line 14: Lexeme: )               Token: DELIM_C_PAREN
Line 14: Lexeme: ;               Token: DELIM_SEMCOL
Line 16: Lexeme: out             Token: OUTPUT         
Line 16: Lexeme: (               Token: DELIM_O_PAREN
Line 16: Lexeme: "Age: %d"       Token: CONSTANT_TXTFS
Line 16: Lexeme: ,               Token: DELIM_COMMA
Line 16: Lexeme: age             Token: IDENTIFIER
Line 16: Lexeme: )               Token: DELIM_C_PAREN
Line 16: Lexeme: ;               Token: DELIM_SEMCOL
Line 17: Lexeme: out             Token: OUTPUT         
Line 17: Lexeme: (               Token: DELIM_O_PAREN
Line 17: Lexeme: "Float: %f"     Token: CONSTANT_TXTFS
Line 17: Lexeme: ,               Token: DELIM_COMMA
Line 17: Lexeme: float_a         Token: IDENTIFIER
Line 17: Lexeme: )               Token: DELIM_C_PAREN
Line 17: Lexeme: ;               Token: DELIM_SEMCOL
Line 18: Lexeme: out             Token: OUTPUT         
Line 18: Lexeme: (               Token: DELIM_O_PAREN
Line 18: Lexeme: "Text: %s"      Token: CONSTANT_TXTFS
Line 18: Lexeme: ,               Token: DELIM_COMMA
Line 18: Lexeme: text_a          Token: IDENTIFIER
Line 18: Lexeme: )               Token: DELIM_C_PAREN
Line 18: Lexeme: ;               Token: DELIM_SEMCOL
Line 19: Lexeme: out             Token: OUTPUT         
Line 19: Lexeme: (               Token: DELIM_O_PAREN
Line 19: Lexeme: "Letter: %c"    Token: CONSTANT_TXTFS
Line 19: Lexeme: ,               Token: DELIM_COMMA
Line 19: Lexeme: letter          Token: IDENTIFIER
Line 19: Lexeme: )               Token: DELIM_C_PAREN
Line 19: Lexeme: ;               Token: DELIM_SEMCOL
Line 21: Lexeme: //              Token: COMMENT
Line 22: Lexeme: decimal         Token: IDENTIFIER
Line 22: Lexeme: =               Token: =
Line 22: Lexeme: 89.70           Token: CONSTANT_DRIFT
Line 22: Lexeme: ;               Token: DELIM_SEMCOL
Line 23: Lexeme: count           Token: IDENTIFIER
Line 23: Lexeme: +=              Token: +=
Line 23: Lexeme: test_var        Token: IDENTIFIER
Line 23: Lexeme: ;               Token: DELIM_SEMCOL
Line 24: Lexeme: count           Token: IDENTIFIER
Line 24: Lexeme: *=              Token: *=
Line 24: Lexeme: test_var        Token: IDENTIFIER
Line 24: Lexeme: ;               Token: DELIM_SEMCOL
Line 25: Lexeme: count           Token: IDENTIFIER
Line 25: Lexeme: -=              Token: -=
Line 25: Lexeme: test_var        Token: IDENTIFIER
Line 25: Lexeme: ;               Token: DELIM_SEMCOL
Line 26: Lexeme: count           Token: IDENTIFIER
Line 26: Lexeme: |=              Token: |=
Line 26: Lexeme: test_var        Token: IDENTIFIER
Line 26: Lexeme: ;               Token: DELIM_SEMCOL
Line 27: Lexeme: count           Token: IDENTIFIER
Line 27: Lexeme: %=              Token: %=
Line 27: Lexeme: test_var        Token: IDENTIFIER
Line 27: Lexeme: ;               Token: DELIM_SEMCOL
Line 28: Lexeme: average         Token: IDENTIFIER
Line 28: Lexeme: =               Token: =
Line 28: Lexeme: (               Token: DELIM_O_PAREN
Line 28: Lexeme: math_grade      Token: IDENTIFIER
Line 28: Lexeme: +               Token: +
Line 28: Lexeme: science_grade   Token: IDENTIFIER
Line 28: Lexeme: +               Token: +
Line 28: Lexeme: english_grade   Token: IDENTIFIER
Line 28: Lexeme: )               Token: DELIM_C_PAREN
Line 28: Lexeme: /               Token: /
Line 28: Lexeme: 3               Token: CONSTANT_NUM
Line 28: Lexeme: ;               Token: DELIM_SEMCOL
Line 30: Lexeme: a               Token: IDENTIFIER
Line 30: Lexeme: =               Token: =
Line 30: Lexeme: b               Token: IDENTIFIER
Line 30: Lexeme: ;               Token: DELIM_SEMCOL
Line 31: Lexeme: a               Token: IDENTIFIER
Line 31: Lexeme: =               Token: =
Line 31: Lexeme: 8               Token: CONSTANT_NUM
Line 31: Lexeme: ;               Token: DELIM_SEMCOL
Line 32: Lexeme: a               Token: IDENTIFIER
Line 32: Lexeme: =               Token: =
Line 32: Lexeme: (               Token: DELIM_O_PAREN
Line 32: Lexeme: 8               Token: CONSTANT_NUM
Line 32: Lexeme: +               Token: +
Line 32: Lexeme: n               Token: IDENTIFIER
Line 32: Lexeme: *               Token: *
Line 32: Lexeme: (               Token: DELIM_O_PAREN
Line 32: Lexeme: c               Token: IDENTIFIER
Line 32: Lexeme: *               Token: *
Line 32: Lexeme: f               Token: IDENTIFIER
Line 32: Lexeme: )               Token: DELIM_C_PAREN
Line 32: Lexeme: ==              Token: ==
Line 32: Lexeme: 5               Token: CONSTANT_NUM
Line 32: Lexeme: )               Token: DELIM_C_PAREN
Line 32: Lexeme: ;               Token: DELIM_SEMCOL
Line 34: Lexeme: //              Token: COMMENT
Line 35: Lexeme: if              Token: IF             
Line 35: Lexeme: (               Token: DELIM_O_PAREN
Line 35: Lexeme: average         Token: IDENTIFIER
Line 35: Lexeme: >=              Token: >=
Line 35: Lexeme: 97.0            Token: CONSTANT_DRIFT
Line 35: Lexeme: )               Token: DELIM_C_PAREN
Line 35: Lexeme: {               Token: DELIM_O_BRACE
Line 36: Lexeme: out             Token: OUTPUT         
Line 36: Lexeme: (               Token: DELIM_O_PAREN
Line 36: Lexeme: "GWA is very high!" Token: CONSTANT_TEXT
Line 36: Lexeme: )               Token: DELIM_C_PAREN
Line 36: Lexeme: ;               Token: DELIM_SEMCOL
Line 37: Lexeme: }               Token: DELIM_C_BRACE
Line 39: Lexeme: if              Token: IF             
Line 39: Lexeme: (               Token: DELIM_O_PAREN
Line 39: Lexeme: average         Token: IDENTIFIER
Line 39: Lexeme: >=              Token: >=
Line 39: Lexeme: 1               Token: CONSTANT_NUM
Line 39: Lexeme: )               Token: DELIM_C_PAREN
Line 39: Lexeme: {               Token: DELIM_O_BRACE
Line 40: Lexeme: if              Token: IF             
Line 40: Lexeme: (               Token: DELIM_O_PAREN
Line 40: Lexeme: average         Token: IDENTIFIER
Line 40: Lexeme: <=              Token: <=
Line 40: Lexeme: 5               Token: CONSTANT_NUM
Line 40: Lexeme: )               Token: DELIM_C_PAREN
Line 40: Lexeme: {               Token: DELIM_O_BRACE
Line 41: Lexeme: out             Token: OUTPUT         
Line 41: Lexeme: (               Token: DELIM_O_PAREN
Line 41: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 41: Lexeme: ,               Token: DELIM_COMMA
Line 41: Lexeme: average         Token: IDENTIFIER
Line 41: Lexeme: )               Token: DELIM_C_PAREN
Line 41: Lexeme: ;               Token: DELIM_SEMCOL
Line 42: Lexeme: }               Token: DELIM_C_BRACE
Line 43: Lexeme: }               Token: DELIM_C_BRACE
Line 45: Lexeme: if              Token: IF             
Line 45: Lexeme: (               Token: DELIM_O_PAREN
Line 45: Lexeme: win             Token: IDENTIFIER
Line 45: Lexeme: ==              Token: ==
Line 45: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 45: Lexeme: )               Token: DELIM_C_PAREN
Line 45: Lexeme: {               Token: DELIM_O_BRACE
Line 46: Lexeme: out             Token: OUTPUT         
Line 46: Lexeme: (               Token: DELIM_O_PAREN
Line 46: Lexeme: "You won!"      Token: CONSTANT_TEXT
Line 46: Lexeme: )               Token: DELIM_C_PAREN
Line 46: Lexeme: ;               Token: DELIM_SEMCOL
Line 47: Lexeme: }               Token: DELIM_C_BRACE
Line 47: Lexeme: other           Token: OTHER          
Line 47: Lexeme: {               Token: DELIM_O_BRACE
Line 48: Lexeme: out             Token: OUTPUT         
Line 48: Lexeme: (               Token: DELIM_O_PAREN
Line 48: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 48: Lexeme: )               Token: DELIM_C_PAREN
Line 48: Lexeme: ;               Token: DELIM_SEMCOL
Line 49: Lexeme: }               Token: DELIM_C_BRACE
Line 51: Lexeme: if              Token: IF             
Line 51: Lexeme: (               Token: DELIM_O_PAREN
Line 51: Lexeme: win             Token: IDENTIFIER
Line 51: Lexeme: ==              Token: ==
Line 51: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 51: Lexeme: )               Token: DELIM_C_PAREN
Line 51: Lexeme: {               Token: DELIM_O_BRACE
Line 52: Lexeme: if              Token: IF             
Line 52: Lexeme: (               Token: DELIM_O_PAREN
Line 52: Lexeme: num_win         Token: IDENTIFIER
Line 52: Lexeme: >               Token: >
Line 52: Lexeme: 10              Token: CONSTANT_NUM
Line 52: Lexeme: )               Token: DELIM_C_PAREN
Line 52: Lexeme: {               Token: DELIM_O_BRACE
Line 53: Lexeme: out             Token: OUTPUT         
Line 53: Lexeme: (               Token: DELIM_O_PAREN
Line 53: Lexeme: "You've won for more than 10 times!" Token: CONSTANT_TEXT
Line 53: Lexeme: )               Token: DELIM_C_PAREN
Line 53: Lexeme: ;               Token: DELIM_SEMCOL
Line 54: Lexeme: }               Token: DELIM_C_BRACE
Line 54: Lexeme: other           Token: OTHER          
Line 54: Lexeme: {               Token: DELIM_O_BRACE
Line 55: Lexeme: out             Token: OUTPUT         
Line 55: Lexeme: (               Token: DELIM_O_PAREN
Line 55: Lexeme: "You have only won for 10 times!" Token: CONSTANT_TEXT
Line 55: Lexeme: )               Token: DELIM_C_PAREN
Line 55: Lexeme: ;               Token: DELIM_SEMCOL
Line 56: Lexeme: }               Token: DELIM_C_BRACE
Line 57: Lexeme: }               Token: DELIM_C_BRACE
Line 57: Lexeme: other           Token: OTHER          
Line 57: Lexeme: {               Token: DELIM_O_BRACE
Line 58: Lexeme: out             Token: OUTPUT         
Line 58: Lexeme: (               Token: DELIM_O_PAREN
Line 58: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 58: Lexeme: )               Token: DELIM_C_PAREN
Line 58: Lexeme: ;               Token: DELIM_SEMCOL
Line 59: Lexeme: }               Token: DELIM_C_BRACE
Line 61: Lexeme: //              Token: COMMENT
Line 62: Lexeme: rep             Token: REP            
Line 62: Lexeme: (               Token: DELIM_O_PAREN
Line 62: Lexeme: num             Token: NUM            
Line 62: Lexeme: a               Token: IDENTIFIER
Line 62: Lexeme: =               Token: =
Line 62: Lexeme: 0               Token: CONSTANT_NUM
Line 62: Lexeme: ;               Token: DELIM_SEMCOL
Line 62: Lexeme: a               Token: IDENTIFIER
Line 62: Lexeme: <               Token: <
Line 62: Lexeme: 5               Token: CONSTANT_NUM
Line 62: Lexeme: ;               Token: DELIM_SEMCOL
Line 62: Lexeme: a               Token: IDENTIFIER
Line 62: Lexeme: ++              Token: ++
Line 62: Lexeme: )               Token: DELIM_C_PAREN
Line 62: Lexeme: {               Token: DELIM_O_BRACE
Line 63: Lexeme: out             Token: OUTPUT         
Line 63: Lexeme: (               Token: DELIM_O_PAREN
Line 63: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 63: Lexeme: ,               Token: DELIM_COMMA
Line 63: Lexeme: a               Token: IDENTIFIER
Line 63: Lexeme: )               Token: DELIM_C_PAREN
Line 63: Lexeme: ;               Token: DELIM_SEMCOL
Line 64: Lexeme: }               Token: DELIM_C_BRACE
Line 66: Lexeme: rep             Token: REP            
Line 66: Lexeme: (               Token: DELIM_O_PAREN
Line 66: Lexeme: num             Token: NUM            
Line 66: Lexeme: i               Token: IDENTIFIER
Line 66: Lexeme: =               Token: =
Line 66: Lexeme: 0               Token: CONSTANT_NUM
Line 66: Lexeme: ;               Token: DELIM_SEMCOL
Line 66: Lexeme: i               Token: IDENTIFIER
Line 66: Lexeme: <               Token: <
Line 66: Lexeme: 5               Token: CONSTANT_NUM
Line 66: Lexeme: ;               Token: DELIM_SEMCOL
Line 66: Lexeme: i               Token: IDENTIFIER
Line 66: Lexeme: ++              Token: ++
Line 66: Lexeme: )               Token: DELIM_C_PAREN
Line 66: Lexeme: {               Token: DELIM_O_BRACE
Line 67: Lexeme: out             Token: OUTPUT         
Line 67: Lexeme: (               Token: DELIM_O_PAREN
Line 67: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 67: Lexeme: ,               Token: DELIM_COMMA
Line 67: Lexeme: i               Token: IDENTIFIER
Line 67: Lexeme: )               Token: DELIM_C_PAREN
Line 67: Lexeme: ;               Token: DELIM_SEMCOL
Line 68: Lexeme: rep             Token: REP            
Line 68: Lexeme: (               Token: DELIM_O_PAREN
Line 68: Lexeme: num             Token: NUM            
Line 68: Lexeme: j               Token: IDENTIFIER
Line 68: Lexeme: =               Token: =
Line 68: Lexeme: 0               Token: CONSTANT_NUM
Line 68: Lexeme: ;               Token: DELIM_SEMCOL
Line 68: Lexeme: j               Token: IDENTIFIER
Line 68: Lexeme: <               Token: <
Line 68: Lexeme: 5               Token: CONSTANT_NUM
Line 68: Lexeme: ;               Token: DELIM_SEMCOL
Line 68: Lexeme: j               Token: IDENTIFIER
Line 68: Lexeme: ++              Token: ++
Line 68: Lexeme: )               Token: DELIM_C_PAREN
Line 68: Lexeme: {               Token: DELIM_O_BRACE
Line 69: Lexeme: out             Token: OUTPUT         
Line 69: Lexeme: (               Token: DELIM_O_PAREN
Line 69: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 69: Lexeme: ,               Token: DELIM_COMMA
Line 69: Lexeme: j               Token: IDENTIFIER
Line 69: Lexeme: )               Token: DELIM_C_PAREN
Line 69: Lexeme: ;               Token: DELIM_SEMCOL
Line 70: Lexeme: }               Token: DELIM_C_BRACE
Line 71: Lexeme: }               Token: DELIM_C_BRACE
Line 73: Lexeme: num             Token: NUM            
Line 73: Lexeme: i               Token: IDENTIFIER
Line 73: Lexeme: =               Token: =
Line 73: Lexeme: 0               Token: CONSTANT_NUM
Line 73: Lexeme: ;               Token: DELIM_SEMCOL
Line 75: Lexeme: meanwhile       Token: MEANWHILE      
Line 75: Lexeme: (               Token: DELIM_O_PAREN
Line 75: Lexeme: i               Token: IDENTIFIER
Line 75: Lexeme: <               Token: <
Line 75: Lexeme: 5               Token: CONSTANT_NUM
Line 75: Lexeme: )               Token: DELIM_C_PAREN
Line 75: Lexeme: {               Token: DELIM_O_BRACE
Line 76: Lexeme: out             Token: OUTPUT         
Line 76: Lexeme: (               Token: DELIM_O_PAREN
Line 76: Lexeme: "string test"   Token: CONSTANT_TEXT
Line 76: Lexeme: )               Token: DELIM_C_PAREN
Line 76: Lexeme: ;               Token: DELIM_SEMCOL
Line 77: Lexeme: i               Token: IDENTIFIER
Line 77: Lexeme: ++              Token: ++
Line 77: Lexeme: ;               Token: DELIM_SEMCOL
Line 78: Lexeme: }               Token: DELIM_C_BRACE
Line 80: Lexeme: num             Token: NUM            
Line 80: Lexeme: i               Token: IDENTIFIER
Line 80: Lexeme: =               Token: =
Line 80: Lexeme: 0               Token: CONSTANT_NUM
Line 80: Lexeme: ;               Token: DELIM_SEMCOL
Line 81: Lexeme: num             Token: NUM            
Line 81: Lexeme: j               Token: IDENTIFIER
Line 81: Lexeme: ;               Token: DELIM_SEMCOL
Line 83: Lexeme: meanwhile       Token: MEANWHILE      
Line 83: Lexeme: (               Token: DELIM_O_PAREN
Line 83: Lexeme: i               Token: IDENTIFIER
Line 83: Lexeme: <               Token: <
Line 83: Lexeme: 5               Token: CONSTANT_NUM
Line 83: Lexeme: )               Token: DELIM_C_PAREN
Line 83: Lexeme: {               Token: DELIM_O_BRACE
Line 84: Lexeme: out             Token: OUTPUT         
Line 84: Lexeme: (               Token: DELIM_O_PAREN
Line 84: Lexeme: "%d"            Token: CONSTANT_TXTFS
Line 84: Lexeme: ,               Token: DELIM_COMMA
Line 84: Lexeme: identifier      Token: IDENTIFIER
Line 84: Lexeme: )               Token: DELIM_C_PAREN
Line 84: Lexeme: ;               Token: DELIM_SEMCOL
Line 85: Lexeme: j               Token: IDENTIFIER
Line 85: Lexeme: =               Token: =
Line 85: Lexeme: 0               Token: CONSTANT_NUM
Line 85: Lexeme: ;               Token: DELIM_SEMCOL
Line 86: Lexeme: meanwhile       Token: MEANWHILE      
Line 86: Lexeme: (               Token: DELIM_O_PAREN
Line 86: Lexeme: j               Token: IDENTIFIER
Line 86: Lexeme: <               Token: <
Line 86: Lexeme: 5               Token: CONSTANT_NUM
Line 86: Lexeme: )               Token: DELIM_C_PAREN
Line 86: Lexeme: {               Token: DELIM_O_BRACE
Line 87: Lexeme: out             Token: OUTPUT         
Line 87: Lexeme: (               Token: DELIM_O_PAREN
Line 87: Lexeme: "J: %d"         Token: CONSTANT_TXTFS
Line 87: Lexeme: ,               Token: DELIM_COMMA
Line 87: Lexeme: j               Token: IDENTIFIER
Line 87: Lexeme: )               Token: DELIM_C_PAREN
Line 87: Lexeme: ;               Token: DELIM_SEMCOL
Line 88: Lexeme: j               Token: IDENTIFIER
Line 88: Lexeme: ++              Token: ++
Line 88: Lexeme: ;               Token: DELIM_SEMCOL
Line 89: Lexeme: }               Token: DELIM_C_BRACE
Line 90: Lexeme: i               Token: IDENTIFIER
Line 90: Lexeme: ++              Token: ++
Line 90: Lexeme: ;               Token: DELIM_SEMCOL
Line 91: Lexeme: }               Token: DELIM_C_BRACE
Line 93: Lexeme: num             Token: NUM            
Line 93: Lexeme: i               Token: IDENTIFIER
Line 93: Lexeme: =               Token: =
Line 93: Lexeme: 0               Token: CONSTANT_NUM
Line 93: Lexeme: ;               Token: DELIM_SEMCOL
Line 95: Lexeme: do              Token: DO             
Line 95: Lexeme: {               Token: DELIM_O_BRACE
Line 96: Lexeme: out             Token: OUTPUT         
Line 96: Lexeme: (               Token: DELIM_O_PAREN
Line 96: Lexeme: "Test Output"   Token: CONSTANT_TEXT
Line 96: Lexeme: )               Token: DELIM_C_PAREN
Line 96: Lexeme: ;               Token: DELIM_SEMCOL
Line 97: Lexeme: i               Token: IDENTIFIER
Line 97: Lexeme: ++              Token: ++
Line 97: Lexeme: ;               Token: DELIM_SEMCOL
Line 98: Lexeme: }               Token: DELIM_C_BRACE
Line 98: Lexeme: meanwhile       Token: MEANWHILE      
Line 98: Lexeme: (               Token: DELIM_O_PAREN
Line 98: Lexeme: i               Token: IDENTIFIER
Line 98: Lexeme: <               Token: <
Line 98: Lexeme: 5               Token: CONSTANT_NUM
Line 98: Lexeme: )               Token: DELIM_C_PAREN
Line 98: Lexeme: ;               Token: DELIM_SEMCOL
Line 100: Lexeme: num             Token: NUM            
Line 100: Lexeme: i               Token: IDENTIFIER
Line 100: Lexeme: =               Token: =
Line 100: Lexeme: 0               Token: CONSTANT_NUM
Line 100: Lexeme: ;               Token: DELIM_SEMCOL
Line 101: Lexeme: num             Token: NUM            
Line 101: Lexeme: j               Token: IDENTIFIER
Line 101: Lexeme: =               Token: =
Line 101: Lexeme: 0               Token: CONSTANT_NUM
Line 101: Lexeme: ;               Token: DELIM_SEMCOL
Line 103: Lexeme: do              Token: DO             
Line 103: Lexeme: {               Token: DELIM_O_BRACE
Line 104: Lexeme: out             Token: OUTPUT         
Line 104: Lexeme: (               Token: DELIM_O_PAREN
Line 104: Lexeme: "This is an output statement" Token: CONSTANT_TEXT
Line 104: Lexeme: )               Token: DELIM_C_PAREN
Line 104: Lexeme: ;               Token: DELIM_SEMCOL
Line 105: Lexeme: j               Token: IDENTIFIER
Line 105: Lexeme: =               Token: =
Line 105: Lexeme: 0               Token: CONSTANT_NUM
Line 105: Lexeme: ;               Token: DELIM_SEMCOL
Line 106: Lexeme: do              Token: DO             
Line 106: Lexeme: {               Token: DELIM_O_BRACE
Line 107: Lexeme: out             Token: OUTPUT         
Line 107: Lexeme: (               Token: DELIM_O_PAREN
Line 107: Lexeme: "OUTPUT"        Token: CONSTANT_TEXT
Line 107: Lexeme: )               Token: DELIM_C_PAREN
Line 107: Lexeme: ;               Token: DELIM_SEMCOL
Line 108: Lexeme: j               Token: IDENTIFIER
Line 108: Lexeme: ++              Token: ++
Line 108: Lexeme: ;               Token: DELIM_SEMCOL
Line 109: Lexeme: }               Token: DELIM_C_BRACE
Line 109: Lexeme: meanwhile       Token: MEANWHILE      
Line 109: Lexeme: (               Token: DELIM_O_PAREN
Line 109: Lexeme: j               Token: IDENTIFIER
Line 109: Lexeme: <               Token: <
Line 109: Lexeme: 5               Token: CONSTANT_NUM
Line 109: Lexeme: )               Token: DELIM_C_PAREN
Line 109: Lexeme: ;               Token: DELIM_SEMCOL
Line 110: Lexeme: i               Token: IDENTIFIER
Line 110: Lexeme: ++              Token: ++
Line 110: Lexeme: ;               Token: DELIM_SEMCOL
Line 111: Lexeme: }               Token: DELIM_C_BRACE
Line 111: Lexeme: meanwhile       Token: MEANWHILE      
Line 111: Lexeme: (               Token: DELIM_O_PAREN
Line 111: Lexeme: i               Token: IDENTIFIER
Line 111: Lexeme: <               Token: <
Line 111: Lexeme: 5               Token: CONSTANT_NUM
Line 111: Lexeme: )               Token: DELIM_C_PAREN
Line 111: Lexeme: ;               Token: DELIM_SEMCOL
Line 114: Lexeme: rep             Token: REP            
Line 114: Lexeme: (               Token: DELIM_O_PAREN
Line 114: Lexeme: num             Token: NUM            
Line 114: Lexeme: a               Token: IDENTIFIER
Line 114: Lexeme: =               Token: =
Line 114: Lexeme: 1               Token: CONSTANT_NUM
Line 114: Lexeme: ;               Token: DELIM_SEMCOL
Line 114: Lexeme: a               Token: IDENTIFIER
Line 114: Lexeme: >               Token: >
Line 114: Lexeme: 1               Token: CONSTANT_NUM
Line 114: Lexeme: ;               Token: DELIM_SEMCOL
Line 114: Lexeme: a               Token: IDENTIFIER
Line 114: Lexeme: ++              Token: ++
Line 114: Lexeme: )               Token: DELIM_C_PAREN
Line 114: Lexeme: {               Token: DELIM_O_BRACE
Line 115: Lexeme: meanwhile       Token: MEANWHILE      
Line 115: Lexeme: (               Token: DELIM_O_PAREN
Line 115: Lexeme: i               Token: IDENTIFIER
Line 115: Lexeme: >               Token: >
Line 115: Lexeme: 10              Token: CONSTANT_NUM
Line 115: Lexeme: )               Token: DELIM_C_PAREN
Line 115: Lexeme: {               Token: DELIM_O_BRACE
Line 116: Lexeme: do              Token: DO             
Line 116: Lexeme: {               Token: DELIM_O_BRACE
Line 117: Lexeme: test            Token: IDENTIFIER
Line 117: Lexeme: =               Token: =
Line 117: Lexeme: test            Token: IDENTIFIER
Line 117: Lexeme: ;               Token: DELIM_SEMCOL
Line 118: Lexeme: }               Token: DELIM_C_BRACE
Line 118: Lexeme: meanwhile       Token: MEANWHILE      
Line 118: Lexeme: (               Token: DELIM_O_PAREN
Line 118: Lexeme: i               Token: IDENTIFIER
Line 118: Lexeme: <               Token: <
Line 118: Lexeme: 10              Token: CONSTANT_NUM
Line 118: Lexeme: )               Token: DELIM_C_PAREN
Line 118: Lexeme: ;               Token: DELIM_SEMCOL
Line 119: Lexeme: }               Token: DELIM_C_BRACE
Line 120: Lexeme: }               Token: DELIM_C_BRACE
Line 122: Lexeme: //              Token: COMMENT
Line 123: Lexeme: num             Token: NUM            
Line 123: Lexeme: count           Token: IDENTIFIER
Line 123: Lexeme: ;               Token: DELIM_SEMCOL
Line 124: Lexeme: drift           Token: DRIFT          
Line 124: Lexeme: decimal         Token: IDENTIFIER
Line 124: Lexeme: =               Token: =
Line 124: Lexeme: 89.70           Token: CONSTANT_DRIFT
Line 124: Lexeme: ;               Token: DELIM_SEMCOL
Line 125: Lexeme: num             Token: NUM            
Line 125: Lexeme: count           Token: IDENTIFIER
Line 125: Lexeme: =               Token: =
Line 125: Lexeme: number          Token: IDENTIFIER
Line 125: Lexeme: ;               Token: DELIM_SEMCOL
Line 126: Lexeme: drift           Token: DRIFT          
Line 126: Lexeme: math_grade      Token: IDENTIFIER
Line 126: Lexeme: ,               Token: DELIM_COMMA
Line 126: Lexeme: science_grade   Token: IDENTIFIER
Line 126: Lexeme: ,               Token: DELIM_COMMA
Line 126: Lexeme: english_grade   Token: IDENTIFIER
Line 126: Lexeme: ;               Token: DELIM_SEMCOL
Line 127: Lexeme: drift           Token: DRIFT          
Line 127: Lexeme: math_grade      Token: IDENTIFIER
Line 127: Lexeme: =               Token: =
Line 127: Lexeme: 97.5            Token: CONSTANT_DRIFT
Line 127: Lexeme: ,               Token: DELIM_COMMA
Line 127: Lexeme: science_grade   Token: IDENTIFIER
Line 127: Lexeme: =               Token: =
Line 127: Lexeme: 95.5            Token: CONSTANT_DRIFT
Line 127: Lexeme: ,               Token: DELIM_COMMA
Line 127: Lexeme: english_grade   Token: IDENTIFIER
Line 127: Lexeme: =               Token: =
Line 127: Lexeme: math_grade      Token: IDENTIFIER
Line 127: Lexeme: ;               Token: DELIM_SEMCOL
Line 129: Lexeme: u               Token: IDENTIFIER
Line 129: Lexeme: ++              Token: ++
Line 129: Lexeme: ;               Token: DELIM_SEMCOL
Line 130: Lexeme: ++              Token: ++
Line 130: Lexeme: u               Token: IDENTIFIER
Line 130: Lexeme: ;               Token: DELIM_SEMCOL
Line 132: Lexeme: if              Token: IF             
Line 132: Lexeme: (               Token: DELIM_O_PAREN
Line 132: Lexeme: win             Token: IDENTIFIER
Line 132: Lexeme: ==              Token: ==
Line 132: Lexeme: nocap           Token: CONSTANT_LEGIT
Line 132: Lexeme: )               Token: DELIM_C_PAREN
Line 132: Lexeme: {               Token: DELIM_O_BRACE
Line 133: Lexeme: out             Token: OUTPUT         
Line 133: Lexeme: (               Token: DELIM_O_PAREN
Line 133: Lexeme: "You won!"      Token: CONSTANT_TEXT
Line 133: Lexeme: )               Token: DELIM_C_PAREN
Line 133: Lexeme: ;               Token: DELIM_SEMCOL
Line 134: Lexeme: }               Token: DELIM_C_BRACE
Line 134: Lexeme: ex              Token: EX             
Line 134: Lexeme: (               Token: DELIM_O_PAREN
Line 134: Lexeme: win             Token: IDENTIFIER
Line 134: Lexeme: ==              Token: ==
Line 134: Lexeme: cap             Token: CONSTANT_LEGIT
Line 134: Lexeme: )               Token: DELIM_C_PAREN
Line 134: Lexeme: {               Token: DELIM_O_BRACE
Line 135: Lexeme: out             Token: OUTPUT         
Line 135: Lexeme: (               Token: DELIM_O_PAREN
Line 135: Lexeme: "You lost!"     Token: CONSTANT_TEXT
Line 135: Lexeme: )               Token: DELIM_C_PAREN
Line 135: Lexeme: ;               Token: DELIM_SEMCOL
Line 136: Lexeme: }               Token: DELIM_C_BRACE
Line 138: Lexeme: if              Token: IF             
Line 138: Lexeme: (               Token: DELIM_O_PAREN
Line 138: Lexeme: test            Token: IDENTIFIER
Line 138: Lexeme: )               Token: DELIM_C_PAREN
Line 138: Lexeme: {               Token: DELIM_O_BRACE
Line 139: Lexeme: test            Token: IDENTIFIER
Line 139: Lexeme: =               Token: =
Line 139: Lexeme: test            Token: IDENTIFIER
Line 139: Lexeme: ;               Token: DELIM_SEMCOL
Line 140: Lexeme: }               Token: DELIM_C_BRACE
Line 140: Lexeme: ex              Token: EX             
Line 140: Lexeme: (               Token: DELIM_O_PAREN
Line 140: Lexeme: test            Token: IDENTIFIER
Line 140: Lexeme: )               Token: DELIM_C_PAREN
Line 140: Lexeme: {               Token: DELIM_O_BRACE
Line 141: Lexeme: test            Token: IDENTIFIER
Line 141: Lexeme: =               Token: =
Line 141: Lexeme: test            Token: IDENTIFIER
Line 141: Lexeme: ;               Token: DELIM_SEMCOL
Line 142: Lexeme: }               Token: DELIM_C_BRACE
Line 142: Lexeme: ex              Token: EX             
Line 142: Lexeme: (               Token: DELIM_O_PAREN
Line 142: Lexeme: test            Token: IDENTIFIER
Line 142: Lexeme: )               Token: DELIM_C_PAREN
Line 142: Lexeme: {               Token: DELIM_O_BRACE
Line 143: Lexeme: test            Token: IDENTIFIER
Line 143: Lexeme: =               Token: =
Line 143: Lexeme: test            Token: IDENTIFIER
Line 143: Lexeme: ;               Token: DELIM_SEMCOL
Line 144: Lexeme: }               Token: DELIM_C_BRACE
Line 144: Lexeme: other           Token: OTHER          
Line 144: Lexeme: {               Token: DELIM_O_BRACE
Line 145: Lexeme: if              Token: IF             
Line 145: Lexeme: (               Token: DELIM_O_PAREN
Line 145: Lexeme: test            Token: IDENTIFIER
Line 145: Lexeme: )               Token: DELIM_C_PAREN
Line 145: Lexeme: {               Token: DELIM_O_BRACE
Line 146: Lexeme: hello           Token: IDENTIFIER
Line 146: Lexeme: ;               Token: DELIM_SEMCOL
Line 147: Lexeme: }               Token: DELIM_C_BRACE
Line 147: Lexeme: other           Token: OTHER          
Line 147: Lexeme: {               Token: DELIM_O_BRACE
Line 148: Lexeme: hello           Token: IDENTIFIER
Line 148: Lexeme: ;               Token: DELIM_SEMCOL
Line 149: Lexeme: }               Token: DELIM_C_BRACE
Line 150: Lexeme: }               Token: DELIM_C_BRACE
Line 152: Lexeme: num             Token: NUM            
Line 152: Lexeme: i               Token: IDENTIFIER
Line 152: Lexeme: ,               Token: DELIM_COMMA
Line 152: Lexeme: j               Token: IDENTIFIER
Line 152: Lexeme: =      