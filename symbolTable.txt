Lexical Analysis of test.shs:

Line 1: Lexeme: //              Token: Comment
Line 2: Lexeme: =               Token: Assignment Operator
Line 3: Lexeme: +=              Token: Assignment Operator
Line 4: Lexeme: -=              Token: Assignment Operator
Line 5: Lexeme: *=              Token: Assignment Operator
Line 6: Lexeme: /=              Token: Assignment Operator
Line 7: Lexeme: %=              Token: Assignment Operator
Line 9: Lexeme: //              Token: Comment
Line 10: Lexeme: &&              Token: Logical Operator (Boolean)
Line 11: Lexeme: ||              Token: Logical Operator (Boolean)
Line 12: Lexeme: !               Token: Logical Operator (Boolean)
Line 14: Lexeme: //              Token: Comment
Line 15: Lexeme: ==              Token: Relational Operator (Boolean)
Line 16: Lexeme: !=              Token: Relational Operator (Boolean)
Line 17: Lexeme: >               Token: Relational Operator (Boolean)
Line 18: Lexeme: <               Token: Relational Operator (Boolean)
Line 19: Lexeme: >=              Token: Relational Operator (Boolean)
Line 20: Lexeme: <=              Token: Relational Operator (Boolean)
Line 22: Lexeme: //              Token: Comment
Line 23: Lexeme: +               Token: Arithmetic Operator
Line 24: Lexeme: -               Token: Arithmetic Operator
Line 25: Lexeme: *               Token: Arithmetic Operator
Line 26: Lexeme: /               Token: Arithmetic Operator
Line 27: Lexeme: %               Token: Arithmetic Operator
Line 28: Lexeme: ^               Token: Arithmetic Operator
Line 29: Lexeme: |               Token: Arithmetic Operator
Line 31: Lexeme: //              Token: Comment
Line 32: Lexeme: +               Token: Arithmetic Operator
Line 33: Lexeme: -               Token: Arithmetic Operator
Line 34: Lexeme: ++              Token: Unary Operator
Line 35: Lexeme: --              Token: Unary Operator
Line 38: Lexeme: //              Token: Comment
Line 39: Lexeme: bounce          Token: Keyword
Line 40: Lexeme: car             Token: Keyword
Line 41: Lexeme: do              Token: Keyword
Line 42: Lexeme: drift           Token: Keyword
Line 43: Lexeme: empty           Token: Keyword
Line 44: Lexeme: ex              Token: Keyword
Line 45: Lexeme: flip            Token: Keyword
Line 46: Lexeme: frozen          Token: Keyword
Line 47: Lexeme: group           Token: Keyword
Line 48: Lexeme: if              Token: Keyword
Line 49: Lexeme: input           Token: Keyword
Line 50: Lexeme: jump            Token: Keyword
Line 51: Lexeme: legit           Token: Keyword
Line 52: Lexeme: locked          Token: Keyword
Line 53: Lexeme: lockin          Token: Keyword
Line 54: Lexeme: long            Token: Keyword
Line 55: Lexeme: meanwhile       Token: Keyword
Line 56: Lexeme: nickname        Token: Keyword
Line 57: Lexeme: num             Token: Keyword
Line 58: Lexeme: open            Token: Keyword
Line 59: Lexeme: other           Token: Keyword
Line 60: Lexeme: out             Token: Keyword
Line 61: Lexeme: outside         Token: Keyword
Line 62: Lexeme: pl              Token: Keyword
Line 63: Lexeme: rep             Token: Keyword
Line 64: Lexeme: scenario        Token: Keyword
Line 65: Lexeme: short           Token: Keyword
Line 66: Lexeme: standard        Token: Keyword
Line 67: Lexeme: stop            Token: Keyword
Line 68: Lexeme: team            Token: Keyword
Line 69: Lexeme: text            Token: Keyword
Line 70: Lexeme: vibe            Token: Keyword
Line 72: Lexeme: //              Token: Comment
Line 73: Lexeme: always          Token: Reserved Word
Line 74: Lexeme: cap             Token: Constant (Legit (bool in C)), Reserved Word
Line 75: Lexeme: cont            Token: Reserved Word
Line 76: Lexeme: nocap           Token: Constant (Legit (bool in C)), Reserved Word
Line 77: Lexeme: toptier         Token: Reserved Word
Line 79: Lexeme: //              Token: Comment
Line 80: Lexeme: aylist          Token: Noise Word
Line 81: Lexeme: eat             Token: Noise Word
Line 82: Lexeme: put             Token: Noise Word
Line 83: Lexeme: tier            Token: Noise Word
Line 84: Lexeme: tra             Token: Noise Word
Line 85: Lexeme: wise            Token: Noise Word
Line 87: Lexeme: //              Token: Comment
Line 88: Lexeme: playlist        Token: Keyword
Line 89: Lexeme: repeat          Token: Keyword
Line 90: Lexeme: output          Token: Keyword
Line 91: Lexeme: extra           Token: Keyword
Line 92: Lexeme: otherwise       Token: Keyword
Line 93: Lexeme: toptier         Token: Reserved Word
Line 95: Lexeme: //              Token: Comment
Line 96: Lexeme: //              Token: Comment
Line 97: Lexeme: /*              Token: Comment
Line 99: Lexeme: */              Token: Comment 
Line 101: Lexeme: //              Token: Comment
Line 102: Lexeme: ,               Token: Delimiter (Comma)
Line 103: Lexeme: ;               Token: Delimiter (Semicolon)
Line 104: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 105: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 106: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 107: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 108: Lexeme: "
              Token: Delimiter (Quotation)
Line 109: Lexeme: "
              Token: Delimiter (Quotation)
Line 110: Lexeme: [               Token: Bracket (Open (Left) Bracket)
Line 111: Lexeme: ]               Token: Bracket (Closing (Right) Bracket)
Line 112: Lexeme: a               Token: Identifier
Line 112: Lexeme: [               Token: Bracket (Open (Left) Bracket)
Line 112: Lexeme: ]               Token: Bracket (Closing (Right) Bracket)
Line 114: Lexeme: //              Token: Comment
Line 115: Lexeme: Valid100        Token: Identifier
Line 116: Lexeme: inv@lid         Token: Invalid
Line 117: Lexeme: 00invalid       Token: Invalid
Line 118: Lexeme: iv~s            Token: Invalid
Line 119: Lexeme: i$invalid       Token: Invalid
Line 120: Lexeme: Valid_identifier Token: Identifier
Line 121: Lexeme: valid_identifier Token: Identifier
Line 122: Lexeme: _valid1         Token: Identifier
Line 123: Lexeme: #valid2         Token: Identifier
Line 124: Lexeme: 1invalid        Token: Invalid
Line 125: Lexeme: valid#1         Token: Identifier
Line 126: Lexeme: valid__alphabet Token: Identifier
Line 127: Lexeme: invalid##       Token: Invalid
Line 128: Lexeme: test#identifier Token: Identifier
Line 129: Lexeme: va              Token: Identifier
Line 129: Lexeme: lid             Token: Identifier
Line 130: Lexeme: casesensitiveidentifier Token: Identifier
Line 131: Lexeme: CaseSensitiveIdentifier Token: Identifier
Line 132: Lexeme: thisIsInv@_valid1 Token: Invalid
Line 133: Lexeme: ##thisShouldBeValid Token: Identifier
Line 134: Lexeme: beh##           Token: Invalid
Line 135: Lexeme: vibe            Token: Keyword
Line 136: Lexeme: always          Token: Reserved Word
Line 139: Lexeme: //              Token: Comment
Line 140: Lexeme: @               Token: Invalid
Line 141: Lexeme: ..              Token: Constant (Drift (float in C))
Line 142: Lexeme: $ello           Token: Invalid
Line 143: Lexeme: 10$2            Token: Invalid
Line 144: Lexeme: 1.01.01         Token: Invalid
Line 145: Lexeme: 0pen            Token: Invalid
Line 146: Lexeme: 0open           Token: Invalid
Line 147: Lexeme: capt@           Token: Invalid
Line 148: Lexeme: name@name       Token: Invalid
Line 149: Lexeme: @111            Token: Invalid
Line 151: Lexeme: //              Token: Comment
Line 152: Lexeme: drifta          Token: Identifier
Line 153: Lexeme: adrift          Token: Identifier
Line 154: Lexeme: darift          Token: Identifier
Line 155: Lexeme: heycont         Token: Identifier
Line 156: Lexeme: acap            Token: Identifier
Line 157: Lexeme: caps            Token: Identifier
Line 158: Lexeme: scap            Token: Identifier
Line 159: Lexeme: bnum            Token: Identifier
Line 160: Lexeme: numerate        Token: Identifier
Line 161: Lexeme: num20           Token: Identifier
Line 162: Lexeme: cap0            Token: Identifier
Line 163: Lexeme: bnocap          Token: Identifier
Line 164: Lexeme: cap20           Token: Identifier
Line 165: Lexeme: nocapb          Token: Identifier
Line 167: Lexeme: //              Token: Comment
Line 168: Lexeme: 5               Token: Constant (Num (int in C))
Line 169: Lexeme: "test"          Token: Constant (Text (string in C)) (Text (string in C))
Line 170: Lexeme: 5.5             Token: Constant (Drift (float in C))
Line 171: Lexeme: 'h'             Token: Invalid
Line 172: Lexeme: 50              Token: Constant (Num (int in C))
Line 174: Lexeme: /*              Token: Comment
Line 177: Lexeme: */              Token: Comment 
Line 179: Lexeme: //              Token: Comment
Line 180: Lexeme: a               Token: Identifier
Line 180: Lexeme: +               Token: Arithmetic Operator
Line 180: Lexeme: b               Token: Identifier
Line 180: Lexeme: ;               Token: Delimiter (Semicolon)
Line 181: Lexeme: a               Token: Identifier
Line 181: Lexeme: +=              Token: Assignment Operator
Line 181: Lexeme: b               Token: Identifier
Line 181: Lexeme: ;               Token: Delimiter (Semicolon)
Line 182: Lexeme: emotion         Token: Identifier
Line 182: Lexeme: =               Token: Assignment Operator
Line 182: Lexeme: happy           Token: Identifier
Line 182: Lexeme: |               Token: Arithmetic Operator
Line 182: Lexeme: sad             Token: Identifier
Line 182: Lexeme: ;               Token: Delimiter (Semicolon)
Line 183: Lexeme: one             Token: Identifier
Line 183: Lexeme: +               Token: Arithmetic Operator
Line 183: Lexeme: one             Token: Identifier
Line 183: Lexeme: ;               Token: Delimiter (Semicolon)
Line 184: Lexeme: 1               Token: Constant (Num (int in C))
Line 184: Lexeme: *               Token: Arithmetic Operator
Line 184: Lexeme: 2               Token: Constant (Num (int in C))
Line 184: Lexeme: ;               Token: Delimiter (Semicolon)
Line 185: Lexeme: out             Token: Keyword
Line 185: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 185: Lexeme: "test string"   Token: Constant (Text (string in C)) (Text (string in C))
Line 185: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 185: Lexeme: ;               Token: Delimiter (Semicolon)
Line 187: Lexeme: //              Token: Comment
Line 188: Lexeme: num             Token: Keyword
Line 188: Lexeme: count           Token: Identifier
Line 188: Lexeme: ;               Token: Delimiter (Semicolon)
Line 189: Lexeme: drift           Token: Keyword
Line 189: Lexeme: decimal         Token: Identifier
Line 189: Lexeme: =               Token: Assignment Operator
Line 189: Lexeme: 89.70           Token: Constant (Drift (float in C))
Line 189: Lexeme: ;               Token: Delimiter (Semicolon)
Line 190: Lexeme: num             Token: Keyword
Line 190: Lexeme: count           Token: Identifier
Line 190: Lexeme: =               Token: Assignment Operator
Line 190: Lexeme: number          Token: Identifier
Line 190: Lexeme: ;               Token: Delimiter (Semicolon)
Line 191: Lexeme: count           Token: Identifier
Line 191: Lexeme: *=              Token: Assignment Operator
Line 191: Lexeme: test_number     Token: Identifier
Line 191: Lexeme: ;               Token: Delimiter (Semicolon)
Line 192: Lexeme: if              Token: Keyword
Line 192: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 192: Lexeme: average         Token: Identifier
Line 192: Lexeme: >=              Token: Relational Operator (Boolean)
Line 192: Lexeme: 97.90           Token: Constant (Drift (float in C))
Line 192: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 192: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 193: Lexeme: out             Token: Keyword
Line 193: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 193: Lexeme: "GWA is very high!" Token: Constant (Text (string in C)) (Text (string in C))
Line 193: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 193: Lexeme: ;               Token: Delimiter (Semicolon)
Line 194: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 195: Lexeme: if              Token: Keyword
Line 195: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 195: Lexeme: a               Token: Identifier
Line 195: Lexeme: ==              Token: Relational Operator (Boolean)
Line 195: Lexeme: b               Token: Identifier
Line 195: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 195: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 196: Lexeme: out             Token: Keyword
Line 196: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 196: Lexeme: "Same!"         Token: Constant (Text (string in C)) (Text (string in C))
Line 196: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 196: Lexeme: ;               Token: Delimiter (Semicolon)
Line 197: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 197: Lexeme: ex              Token: Keyword
Line 197: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 197: Lexeme: a               Token: Identifier
Line 197: Lexeme: >               Token: Relational Operator (Boolean)
Line 197: Lexeme: b               Token: Identifier
Line 197: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 197: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 198: Lexeme: out             Token: Keyword
Line 198: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 198: Lexeme: "Greater!"      Token: Constant (Text (string in C)) (Text (string in C))
Line 198: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 198: Lexeme: ;               Token: Delimiter (Semicolon)
Line 199: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 199: Lexeme: other           Token: Keyword
Line 199: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 200: Lexeme: out             Token: Keyword
Line 200: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 200: Lexeme: "Less!"         Token: Constant (Text (string in C)) (Text (string in C))
Line 200: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 200: Lexeme: ;               Token: Delimiter (Semicolon)
Line 201: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 202: Lexeme: meanwhile       Token: Keyword
Line 202: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 202: Lexeme: i               Token: Identifier
Line 202: Lexeme: <               Token: Relational Operator (Boolean)
Line 202: Lexeme: 5               Token: Constant (Num (int in C))
Line 202: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 202: Lexeme: {               Token: Bracket (Open (Left) Brace)
Line 203: Lexeme: out             Token: Keyword
Line 203: Lexeme: (               Token: Delimiter (Open (Left) Parenthesis)
Line 203: Lexeme: i               Token: Identifier
Line 203: Lexeme: )               Token: Delimiter (Closing (Right) Parenthesis)
Line 203: Lexeme: ;               Token: Delimiter (Semicolon)
Line 204: Lexeme: i               Token: Identifier
Line 204: Lexeme: ++              Token: Unary Operator
Line 204: Lexeme: ;               Token: Delimiter (Semicolon)
Line 205: Lexeme: }               Token: Bracket (Closing (Right) Brace)
Line 208: Lexeme: num             Token: Keyword
Line 208: Lexeme: num1            Token: Identifier
Line 208: Lexeme: =               Token: Assignment Operator
Line 208: Lexeme: 10              Token: Constant (Num (int in C))
Line 208: Lexeme: ;               Token: Delimiter (Semicolon)
Line 209: Lexeme: drift           Token: Keyword
Line 209: Lexeme: d1              Token: Identifier
Line 209: Lexeme: =               Token: Assignment Operator
Line 209: Lexeme: 10.0            Token: Constant (Drift (float in C))
Line 209: Lexeme: ;               Token: Delimiter (Semicolon)
Line 210: Lexeme: i               Token: Identifier
Line 210: Lexeme: ++              Token: Unary Operator
Line 211: Lexeme: --              Token: Unary Operator
Line 211: Lexeme: i               Token: Identifier
Line 212: Lexeme: i               Token: Identifier
Line 212: Lexeme: --              Token: Unary Operator
Line 213: Lexeme: ++              Token: Unary Operator
Line 213: Lexeme: i               Token: Identifier
Line 214: Lexeme: testing         Token: Identifier
Line 214: Lexeme: ,               Token: Delimiter (Comma)
Line 214: Lexeme: the             Token: Identifier
Line 214: Lexeme: ,               Token: Delimiter (Comma)
Line 214: Lexeme: comma           Token: Identifier
Line 215: Lexeme: 1.01            Token: Constant (Drift (float in C))
