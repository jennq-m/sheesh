Lexical Analysis of test.shs:

Line 1: Lexeme: //              Token: COMMENT
Line 2: Lexeme: =               Token: ASSIGNMENT_OPE
Line 3: Lexeme: +=              Token: ASSIGNMENT_OPE
Line 4: Lexeme: -=              Token: ASSIGNMENT_OPE
Line 5: Lexeme: *=              Token: ASSIGNMENT_OPE
Line 6: Lexeme: /=              Token: ASSIGNMENT_OPE
Line 7: Lexeme: %=              Token: ASSIGNMENT_OPE
Line 9: Lexeme: //              Token: COMMENT
Line 10: Lexeme: &&              Token: LOGICAL_OPE
Line 11: Lexeme: ||              Token: LOGICAL_OPE
Line 12: Lexeme: !               Token: LOGICAL_OPE
Line 14: Lexeme: //              Token: COMMENT
Line 15: Lexeme: ==              Token: RELATIONAL_OPE
Line 16: Lexeme: !=              Token: RELATIONAL_OPE
Line 17: Lexeme: >               Token: RELATIONAL_OPE
Line 18: Lexeme: <               Token: RELATIONAL_OPE
Line 19: Lexeme: >=              Token: RELATIONAL_OPE
Line 20: Lexeme: <=              Token: RELATIONAL_OPE
Line 22: Lexeme: //              Token: COMMENT
Line 23: Lexeme: +               Token: ARITHMETIC_OPE
Line 24: Lexeme: -               Token: ARITHMETIC_OPE
Line 25: Lexeme: *               Token: ARITHMETIC_OPE
Line 26: Lexeme: /               Token: ARITHMETIC_OPE
Line 27: Lexeme: %               Token: ARITHMETIC_OPE
Line 28: Lexeme: ^               Token: ARITHMETIC_OPE
Line 29: Lexeme: |               Token: ARITHMETIC_OPE
Line 31: Lexeme: //              Token: COMMENT
Line 32: Lexeme: +               Token: ARITHMETIC_OPE
Line 33: Lexeme: -               Token: ARITHMETIC_OPE
Line 34: Lexeme: ++              Token: UNARY_OPE
Line 35: Lexeme: --              Token: UNARY_OPE
Line 38: Lexeme: //              Token: COMMENT
Line 39: Lexeme: bounce          Token: KEYWORD
Line 40: Lexeme: car             Token: KEYWORD
Line 41: Lexeme: do              Token: KEYWORD
Line 42: Lexeme: drift           Token: KEYWORD
Line 43: Lexeme: empty           Token: KEYWORD
Line 44: Lexeme: ex              Token: KEYWORD
Line 45: Lexeme: flip            Token: KEYWORD
Line 46: Lexeme: frozen          Token: KEYWORD
Line 47: Lexeme: group           Token: KEYWORD
Line 48: Lexeme: if              Token: KEYWORD
Line 49: Lexeme: input           Token: KEYWORD
Line 50: Lexeme: jump            Token: KEYWORD
Line 51: Lexeme: legit           Token: KEYWORD
Line 52: Lexeme: locked          Token: KEYWORD
Line 53: Lexeme: lockin          Token: KEYWORD
Line 54: Lexeme: long            Token: KEYWORD
Line 55: Lexeme: meanwhile       Token: KEYWORD
Line 56: Lexeme: nickname        Token: KEYWORD
Line 57: Lexeme: num             Token: KEYWORD
Line 58: Lexeme: open            Token: KEYWORD
Line 59: Lexeme: other           Token: KEYWORD
Line 60: Lexeme: out             Token: KEYWORD
Line 61: Lexeme: outside         Token: KEYWORD
Line 62: Lexeme: pl              Token: KEYWORD
Line 63: Lexeme: rep             Token: KEYWORD
Line 64: Lexeme: scenario        Token: KEYWORD
Line 65: Lexeme: short           Token: KEYWORD
Line 66: Lexeme: standard        Token: KEYWORD
Line 67: Lexeme: stop            Token: KEYWORD
Line 68: Lexeme: team            Token: KEYWORD
Line 69: Lexeme: text            Token: KEYWORD
Line 70: Lexeme: vibe            Token: KEYWORD
Line 72: Lexeme: //              Token: COMMENT
Line 73: Lexeme: always          Token: RESERVED_WORD
Line 74: Lexeme: cap             Token: CONSTANDRESERVED
Line 75: Lexeme: cont            Token: RESERVED_WORD
Line 76: Lexeme: nocap           Token: CONSTANDRESERVED
Line 77: Lexeme: toptier         Token: RESERVED_WORD
Line 79: Lexeme: //              Token: COMMENT
Line 80: Lexeme: aylist          Token: NOISE_WORD
Line 81: Lexeme: eat             Token: NOISE_WORD
Line 82: Lexeme: put             Token: NOISE_WORD
Line 83: Lexeme: tier            Token: NOISE_WORD
Line 84: Lexeme: tra             Token: NOISE_WORD
Line 85: Lexeme: wise            Token: NOISE_WORD
Line 87: Lexeme: //              Token: COMMENT
Line 88: Lexeme: playlist        Token: KEYWORD
Line 89: Lexeme: repeat          Token: KEYWORD
Line 90: Lexeme: output          Token: KEYWORD
Line 91: Lexeme: extra           Token: KEYWORD
Line 92: Lexeme: otherwise       Token: KEYWORD
Line 93: Lexeme: toptier         Token: RESERVED_WORD
Line 95: Lexeme: //              Token: COMMENT
Line 96: Lexeme: //              Token: COMMENT
Line 97: Lexeme: /*              Token: COMMENT
Line 99: Lexeme: */              Token: COMMENT 
Line 101: Lexeme: single          Token: IDENTIFIER
Line 101: Lexeme: //              Token: COMMENT
Line 102: Lexeme: whole           Token: IDENTIFIER
Line 104: Lexeme: //              Token: COMMENT
Line 105: Lexeme: ,               Token: DELIMITER_COMMA
Line 106: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 107: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 108: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 109: Lexeme: {               Token: DELIMITER_O_BRACE
Line 110: Lexeme: }               Token: DELIMITER_C_BRACE
Line 111: Lexeme: "
              Token: DELIMITER_QUOTATION
Line 112: Lexeme: "
              Token: DELIMITER_QUOTATION
Line 113: Lexeme: '
              Token: DELIMITER_QUOTATION
Line 114: Lexeme: '
              Token: DELIMITER_QUOTATION
Line 115: Lexeme: [               Token: DELIMITER_O_BRACKET
Line 116: Lexeme: ]               Token: DELIMITER_C_BRACKET
Line 117: Lexeme: a               Token: IDENTIFIER
Line 117: Lexeme: [               Token: DELIMITER_O_BRACKET
Line 117: Lexeme: ]               Token: DELIMITER_C_BRACKET
Line 119: Lexeme: //              Token: COMMENT
Line 120: Lexeme: _#              Token: INVALID
Line 121: Lexeme: valid_#_#       Token: INVALID
Line 122: Lexeme: Valid100        Token: IDENTIFIER
Line 123: Lexeme: Val1d           Token: IDENTIFIER
Line 124: Lexeme: val1d           Token: IDENTIFIER
Line 125: Lexeme: inv@lid         Token: INVALID
Line 126: Lexeme: :invalid        Token: INVALID
Line 127: Lexeme: iv~s            Token: INVALID
Line 128: Lexeme: i$invalid       Token: INVALID
Line 129: Lexeme: 00invalid       Token: INVALID
Line 130: Lexeme: invalid##       Token: INVALID
Line 131: Lexeme: notvalid_       Token: INVALID
Line 132: Lexeme: beh_validito    Token: IDENTIFIER
Line 133: Lexeme: valid__din      Token: IDENTIFIER
Line 134: Lexeme: valid#_2        Token: IDENTIFIER
Line 135: Lexeme: va              Token: IDENTIFIER
Line 135: Lexeme: lid             Token: IDENTIFIER
Line 136: Lexeme: Valid_Identifier Token: IDENTIFIER
Line 137: Lexeme: valid_identifier Token: IDENTIFIER
Line 138: Lexeme: _valid1         Token: IDENTIFIER
Line 139: Lexeme: #valid2         Token: IDENTIFIER
Line 140: Lexeme: 1invalid        Token: INVALID
Line 141: Lexeme: valid#1         Token: IDENTIFIER
Line 142: Lexeme: valid__alphabet Token: IDENTIFIER
Line 143: Lexeme: test#identifier Token: IDENTIFIER
Line 144: Lexeme: casesensitiveidentifier Token: IDENTIFIER
Line 145: Lexeme: CaseSensitiveIdentifier Token: IDENTIFIER
Line 146: Lexeme: thisIsInv@_valid1 Token: INVALID
Line 147: Lexeme: ##thisShouldBeValid Token: IDENTIFIER
Line 148: Lexeme: beh##           Token: INVALID
Line 149: Lexeme: vibe            Token: KEYWORD
Line 150: Lexeme: always          Token: RESERVED_WORD
Line 152: Lexeme: //              Token: COMMENT
Line 153: Lexeme: @               Token: INVALID
Line 154: Lexeme: $ello           Token: INVALID
Line 155: Lexeme: 10$2            Token: INVALID
Line 156: Lexeme: 1.01.01         Token: INVALID
Line 157: Lexeme: 0pen            Token: INVALID
Line 158: Lexeme: 0open           Token: INVALID
Line 159: Lexeme: capt@           Token: INVALID
Line 160: Lexeme: name@name       Token: INVALID
Line 161: Lexeme: @111            Token: INVALID
Line 162: Lexeme: ..              Token: INVALID
Line 163: Lexeme: .               Token: INVALID
Line 164: Lexeme: 1.A             Token: INVALID
Line 165: Lexeme: 1.              Token: INVALID
Line 166: Lexeme: 35.8394.0       Token: INVALID
Line 167: Lexeme: 'sdssdfdf'      Token: INVALID
Line 168: Lexeme: ''              Token: INVALID
Line 171: Lexeme: //              Token: COMMENT
Line 172: Lexeme: drifta          Token: IDENTIFIER
Line 173: Lexeme: adrift          Token: IDENTIFIER
Line 174: Lexeme: darift          Token: IDENTIFIER
Line 175: Lexeme: heycont         Token: IDENTIFIER
Line 176: Lexeme: acap            Token: IDENTIFIER
Line 177: Lexeme: caps            Token: IDENTIFIER
Line 178: Lexeme: scap            Token: IDENTIFIER
Line 179: Lexeme: bnum            Token: IDENTIFIER
Line 180: Lexeme: numerate        Token: IDENTIFIER
Line 181: Lexeme: num20           Token: IDENTIFIER
Line 182: Lexeme: cap0            Token: IDENTIFIER
Line 183: Lexeme: bnocap          Token: IDENTIFIER
Line 184: Lexeme: cap20           Token: IDENTIFIER
Line 185: Lexeme: nocapb          Token: IDENTIFIER
Line 187: Lexeme: //              Token: COMMENT
Line 188: Lexeme: 5               Token: CONSTANT_NUM
Line 189: Lexeme: "test"          Token: CONSTANT_TEXT
Line 190: Lexeme: 5.5             Token: CONSTANT_DRIFT
Line 191: Lexeme: 'h'             Token: CONSTANT_VIBE
Line 192: Lexeme: 50              Token: CONSTANT_NUM
Line 193: Lexeme: nocap           Token: CONSTANDRESERVED
Line 194: Lexeme: cap             Token: CONSTANDRESERVED
Line 196: Lexeme: /*              Token: COMMENT
Line 199: Lexeme: */              Token: COMMENT 
Line 201: Lexeme: //              Token: COMMENT
Line 202: Lexeme: a               Token: IDENTIFIER
Line 202: Lexeme: +               Token: ARITHMETIC_OPE
Line 202: Lexeme: b               Token: IDENTIFIER
Line 202: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 203: Lexeme: a               Token: IDENTIFIER
Line 203: Lexeme: +=              Token: ASSIGNMENT_OPE
Line 203: Lexeme: b               Token: IDENTIFIER
Line 203: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 204: Lexeme: emotion         Token: IDENTIFIER
Line 204: Lexeme: =               Token: ASSIGNMENT_OPE
Line 204: Lexeme: happy           Token: IDENTIFIER
Line 204: Lexeme: |               Token: ARITHMETIC_OPE
Line 204: Lexeme: sad             Token: IDENTIFIER
Line 204: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 205: Lexeme: one             Token: IDENTIFIER
Line 205: Lexeme: +               Token: ARITHMETIC_OPE
Line 205: Lexeme: one             Token: IDENTIFIER
Line 205: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 206: Lexeme: 1               Token: CONSTANT_NUM
Line 206: Lexeme: *               Token: ARITHMETIC_OPE
Line 206: Lexeme: 2               Token: CONSTANT_NUM
Line 206: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 207: Lexeme: out             Token: KEYWORD
Line 207: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 207: Lexeme: "test string"   Token: CONSTANT_TEXT
Line 207: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 207: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 209: Lexeme: //              Token: COMMENT
Line 210: Lexeme: num             Token: KEYWORD
Line 210: Lexeme: count           Token: IDENTIFIER
Line 210: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 211: Lexeme: drift           Token: KEYWORD
Line 211: Lexeme: decimal         Token: IDENTIFIER
Line 211: Lexeme: =               Token: ASSIGNMENT_OPE
Line 211: Lexeme: 89.70           Token: CONSTANT_DRIFT
Line 211: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 212: Lexeme: num             Token: KEYWORD
Line 212: Lexeme: count           Token: IDENTIFIER
Line 212: Lexeme: =               Token: ASSIGNMENT_OPE
Line 212: Lexeme: number          Token: IDENTIFIER
Line 212: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 213: Lexeme: count           Token: IDENTIFIER
Line 213: Lexeme: *=              Token: ASSIGNMENT_OPE
Line 213: Lexeme: test_number     Token: IDENTIFIER
Line 213: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 214: Lexeme: if              Token: KEYWORD
Line 214: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 214: Lexeme: average         Token: IDENTIFIER
Line 214: Lexeme: >=              Token: RELATIONAL_OPE
Line 214: Lexeme: 97.90           Token: CONSTANT_DRIFT
Line 214: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 214: Lexeme: {               Token: DELIMITER_O_BRACE
Line 215: Lexeme: out             Token: KEYWORD
Line 215: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 215: Lexeme: "GWA is very high!" Token: CONSTANT_TEXT
Line 215: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 215: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 216: Lexeme: }               Token: DELIMITER_C_BRACE
Line 217: Lexeme: if              Token: KEYWORD
Line 217: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 217: Lexeme: a               Token: IDENTIFIER
Line 217: Lexeme: ==              Token: RELATIONAL_OPE
Line 217: Lexeme: b               Token: IDENTIFIER
Line 217: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 217: Lexeme: {               Token: DELIMITER_O_BRACE
Line 218: Lexeme: out             Token: KEYWORD
Line 218: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 218: Lexeme: "Same!"         Token: CONSTANT_TEXT
Line 218: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 218: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 219: Lexeme: }               Token: DELIMITER_C_BRACE
Line 219: Lexeme: ex              Token: KEYWORD
Line 219: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 219: Lexeme: a               Token: IDENTIFIER
Line 219: Lexeme: >               Token: RELATIONAL_OPE
Line 219: Lexeme: b               Token: IDENTIFIER
Line 219: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 219: Lexeme: {               Token: DELIMITER_O_BRACE
Line 220: Lexeme: out             Token: KEYWORD
Line 220: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 220: Lexeme: "Greater!"      Token: CONSTANT_TEXT
Line 220: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 220: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 221: Lexeme: }               Token: DELIMITER_C_BRACE
Line 221: Lexeme: other           Token: KEYWORD
Line 221: Lexeme: {               Token: DELIMITER_O_BRACE
Line 222: Lexeme: out             Token: KEYWORD
Line 222: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 222: Lexeme: "Less!"         Token: CONSTANT_TEXT
Line 222: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 222: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 223: Lexeme: }               Token: DELIMITER_C_BRACE
Line 224: Lexeme: meanwhile       Token: KEYWORD
Line 224: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 224: Lexeme: i               Token: IDENTIFIER
Line 224: Lexeme: <               Token: RELATIONAL_OPE
Line 224: Lexeme: 5               Token: CONSTANT_NUM
Line 224: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 224: Lexeme: {               Token: DELIMITER_O_BRACE
Line 225: Lexeme: out             Token: KEYWORD
Line 225: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 225: Lexeme: i               Token: IDENTIFIER
Line 225: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 225: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 226: Lexeme: i               Token: IDENTIFIER
Line 226: Lexeme: ++              Token: UNARY_OPE
Line 226: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 227: Lexeme: }               Token: DELIMITER_C_BRACE
Line 229: Lexeme: do              Token: KEYWORD
Line 229: Lexeme: {               Token: DELIMITER_O_BRACE
Line 230: Lexeme: out             Token: KEYWORD
Line 230: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 230: Lexeme: i               Token: IDENTIFIER
Line 230: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 230: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 231: Lexeme: i               Token: IDENTIFIER
Line 231: Lexeme: ++              Token: UNARY_OPE
Line 231: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 232: Lexeme: }               Token: DELIMITER_C_BRACE
Line 232: Lexeme: meanwhile       Token: KEYWORD
Line 232: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 232: Lexeme: i               Token: IDENTIFIER
Line 232: Lexeme: <               Token: RELATIONAL_OPE
Line 232: Lexeme: 5               Token: CONSTANT_NUM
Line 232: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 232: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 234: Lexeme: rep             Token: KEYWORD
Line 234: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 234: Lexeme: num             Token: KEYWORD
Line 234: Lexeme: i               Token: KEYWORD
Line 234: Lexeme: =               Token: ASSIGNMENT_OPE
Line 234: Lexeme: 0               Token: CONSTANT_NUM
Line 234: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 234: Lexeme: i               Token: KEYWORD
Line 234: Lexeme: <               Token: RELATIONAL_OPE
Line 234: Lexeme: 5               Token: CONSTANT_NUM
Line 234: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 234: Lexeme: i               Token: KEYWORD
Line 234: Lexeme: ++              Token: UNARY_OPE
Line 234: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 234: Lexeme: {               Token: DELIMITER_O_BRACE
Line 235: Lexeme: out             Token: KEYWORD
Line 235: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 235: Lexeme: i               Token: IDENTIFIER
Line 235: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 235: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 236: Lexeme: rep             Token: KEYWORD
Line 236: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 236: Lexeme: num             Token: KEYWORD
Line 236: Lexeme: j               Token: IDENTIFIER
Line 236: Lexeme: =               Token: ASSIGNMENT_OPE
Line 236: Lexeme: 0               Token: CONSTANT_NUM
Line 236: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 236: Lexeme: j               Token: IDENTIFIER
Line 236: Lexeme: <               Token: RELATIONAL_OPE
Line 236: Lexeme: 5               Token: CONSTANT_NUM
Line 236: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 236: Lexeme: j               Token: IDENTIFIER
Line 236: Lexeme: ++              Token: UNARY_OPE
Line 236: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 236: Lexeme: {               Token: DELIMITER_O_BRACE
Line 237: Lexeme: out             Token: KEYWORD
Line 237: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 237: Lexeme: j               Token: IDENTIFIER
Line 237: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 237: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 238: Lexeme: }               Token: DELIMITER_C_BRACE
Line 239: Lexeme: }               Token: DELIMITER_C_BRACE
Line 241: Lexeme: out             Token: KEYWORD
Line 241: Lexeme: (               Token: DELIMITER_O_PARENTHESIS
Line 241: Lexeme: "Hello world!"  Token: CONSTANT_TEXT
Line 241: Lexeme: )               Token: DELIMITER_C_PARENTHESIS
Line 241: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 243: Lexeme: num             Token: KEYWORD
Line 243: Lexeme: num1            Token: IDENTIFIER
Line 243: Lexeme: =               Token: ASSIGNMENT_OPE
Line 243: Lexeme: 10              Token: CONSTANT_NUM
Line 243: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 244: Lexeme: drift           Token: KEYWORD
Line 244: Lexeme: d1              Token: IDENTIFIER
Line 244: Lexeme: =               Token: ASSIGNMENT_OPE
Line 244: Lexeme: 10.0            Token: CONSTANT_DRIFT
Line 244: Lexeme: ;               Token: DELIMITER_SEMICOLON
Line 245: Lexeme: i               Token: IDENTIFIER
Line 245: Lexeme: ++              Token: UNARY_OPE
Line 246: Lexeme: --              Token: UNARY_OPE
Line 246: Lexeme: i               Token: IDENTIFIER
Line 247: Lexeme: i               Token: IDENTIFIER
Line 247: Lexeme: --              Token: UNARY_OPE
Line 248: Lexeme: ++              Token: UNARY_OPE
Line 248: Lexeme: i               Token: IDENTIFIER
Line 249: Lexeme: testing         Token: IDENTIFIER
Line 249: Lexeme: ,               Token: DELIMITER_COMMA
Line 249: Lexeme: the             Token: IDENTIFIER
Line 249: Lexeme: ,               Token: DELIMITER_COMMA
Line 249: Lexeme: comma           Token: IDENTIFIER
Line 250: Lexeme: 1.01            Token: CONSTANT_DRIFT
Line 251: Lexeme: 3434.5347       Token: CONSTANT_DRIFT
Line 252: Lexeme: 5               Token: CONSTANT_NUM
Line 252: Lexeme: /               Token: ARITHMETIC_OPE
Line 252: Lexeme: 7               Token: CONSTANT_NUM
Line 253: Lexeme: 5               Token: CONSTANT_NUM
Line 253: Lexeme: %               Token: ARITHMETIC_OPE
Line 253: Lexeme: 8               Token: CONSTANT_NUM
Line 254: Lexeme: 'hello'         Token: INVALID
Line 255: Lexeme: pl              Token: KEYWORD
Line 258: Lexeme: emptyex         Token: IDENTIFIER
Line 259: Lexeme: flipex          Token: IDENTIFIER
Line 260: Lexeme: bounceif        Token: IDENTIFIER
Line 261: Lexeme: ifbounce        Token: IDENTIFIER
Line 262: Lexeme: ifmeanwhile     Token: IDENTIFIER
Line 263: Lexeme: meanwhileif     Token: IDENTIFIER
Line 265: Lexeme: alwaysif        Token: IDENTIFIER
Line 266: Lexeme: captoptier      Token: IDENTIFIER
Line 267: Lexeme: cont            Token: RESERVED_WORD
Line 268: Lexeme: playlistadgsd   Token: IDENTIFIER
Line 269: Lexeme: playlistif      Token: IDENTIFIER
Line 271: Lexeme: repeatif        Token: IDENTIFIER
Line 272: Lexeme: otherw          Token: IDENTIFIER
Line 273: Lexeme: otherwise       Token: KEYWORD
Line 274: Lexeme: other           Token: KEYWORD
Line 276: Lexeme: traif           Token: IDENTIFIER
Line 277: Lexeme: tra             Token: NOISE_WORD
Line 278: Lexeme: pl              Token: KEYWORD
Line 278: Lexeme: aylist          Token: NOISE_WORD
Line 280: Lexeme: =               Token: ASSIGNMENT_OPE
Line 281: Lexeme: ^=              Token: INVALID
Line 282: Lexeme: |=              Token: ASSIGNMENT_OPE
Line 284: Lexeme: number          Token: IDENTIFIER
Line 284: Lexeme: =               Token: ASSIGNMENT_OPE
Line 284: Lexeme: 5               Token: CONSTANT_NUM
Line 285: Lexeme: number          Token: IDENTIFIER
Line 285: Lexeme: =               Token: ASSIGNMENT_OPE
Line 285: Lexeme: 8               Token: CONSTANT_NUM
Line 287: Lexeme: power           Token: IDENTIFIER
Line 287: Lexeme: ^=              Token: INVALID
Line 287: Lexeme: 2               Token: CONSTANT_NUM
Line 288: Lexeme: power           Token: IDENTIFIER
Line 288: Lexeme: ^=              Token: INVALID
Line 288: Lexeme: 2               Token: CONSTANT_NUM
Line 290: Lexeme: intDiv          Token: IDENTIFIER
Line 290: Lexeme: |=              Token: ASSIGNMENT_OPE
Line 290: Lexeme: 2               Token: CONSTANT_NUM
Line 291: Lexeme: intDiv          Token: IDENTIFIER
Line 291: Lexeme: |=              Token: ASSIGNMENT_OPE
Line 291: Lexeme: 5               Token: CONSTANT_NUM
Line 293: Lexeme: cap             Token: CONSTANDRESERVED
Line 293: Lexeme: &&              Token: LOGICAL_OPE
Line 293: Lexeme: nocap           Token: CONSTANDRESERVED
Line 294: Lexeme: cap             Token: CONSTANDRESERVED
Line 294: Lexeme: &&              Token: LOGICAL_OPE
Line 294: Lexeme: nocap           Token: CONSTANDRESERVED
Line 296: Lexeme: cap             Token: CONSTANDRESERVED
Line 296: Lexeme: ||              Token: LOGICAL_OPE
Line 296: Lexeme: nocap           Token: CONSTANDRESERVED
Line 297: Lexeme: cap             Token: CONSTANDRESERVED
Line 297: Lexeme: ||              Token: LOGICAL_OPE
Line 297: Lexeme: nocap           Token: CONSTANDRESERVED
Line 299: Lexeme: !               Token: LOGICAL_OPE
Line 299: Lexeme: bool            Token: IDENTIFIER
Line 301: Lexeme: fl              Token: IDENTIFIER
Line 301: Lexeme: =               Token: ASSIGNMENT_OPE
Line 301: Lexeme: 5.10            Token: CONSTANT_DRIFT
Line 303: Lexeme: 3               Token: CONSTANT_NUM
Line 303: Lexeme: +               Token: ARITHMETIC_OPE
Line 303: Lexeme: 8               Token: CONSTANT_NUM
Line 304: Lexeme: 3               Token: CONSTANT_NUM
Line 304: Lexeme: +               Token: ARITHMETIC_OPE
Line 304: Lexeme: 8               Token: CONSTANT_NUM
Line 306: Lexeme: 9               Token: CONSTANT_NUM
Line 306: Lexeme: |               Token: ARITHMETIC_OPE
Line 306: Lexeme: 11              Token: CONSTANT_NUM
Line 307: Lexeme: 9               Token: CONSTANT_NUM
Line 307: Lexeme: |               Token: ARITHMETIC_OPE
Line 307: Lexeme: 11              Token: CONSTANT_NUM
Line 309: Lexeme: 10.5            Token: CONSTANT_DRIFT
Line 309: Lexeme: *               Token: ARITHMETIC_OPE
Line 309: Lexeme: 2               Token: CONSTANT_NUM
Line 310: Lexeme: 10.5            Token: CONSTANT_DRIFT
Line 310: Lexeme: *               Token: ARITHMETIC_OPE
Line 310: Lexeme: 2               Token: CONSTANT_NUM
Line 312: Lexeme: ==              Token: RELATIONAL_OPE
Line 312: Lexeme: 8               Token: CONSTANT_NUM
Line 313: Lexeme: 8               Token: CONSTANT_NUM
Line 313: Lexeme: <=              Token: RELATIONAL_OPE
Line 313: Lexeme: 5               Token: CONSTANT_NUM
Line 314: Lexeme: 10              Token: CONSTANT_NUM
Line 314: Lexeme: >               Token: RELATIONAL_OPE
Line 314: Lexeme: 6               Token: CONSTANT_NUM
Line 316: Lexeme: ++              Token: UNARY_OPE
Line 316: Lexeme: val             Token: IDENTIFIER
Line 317: Lexeme: --              Token: UNARY_OPE
Line 317: Lexeme: val             Token: IDENTIFIER
Line 318: Lexeme: val             Token: IDENTIFIER
Line 318: Lexeme: /               Token: ARITHMETIC_OPE
Line 318: Lexeme: val2            Token: IDENTIFIER
Line 320: Lexeme: val             Token: IDENTIFIER
Line 320: Lexeme: +=              Token: ASSIGNMENT_OPE
Line 320: Lexeme: 10              Token: CONSTANT_NUM
Line 321: Lexeme: val             Token: IDENTIFIER
Line 321: Lexeme: ++              Token: UNARY_OPE
Line 321: Lexeme: +               Token: ARITHMETIC_OPE
Line 322: Lexeme: ++              Token: UNARY_OPE
Line 322: Lexeme: +               Token: ARITHMETIC_OPE
Line 323: Lexeme: /*              Token: COMMENT
Line 326: Lexeme: */              Token: COMMENT 
Line 327: Lexeme: var             Token: IDENTIFIER
Line 327: Lexeme: ++              Token: UNARY_OPE
Line 327: Lexeme: +               Token: ARITHMETIC_OPE
Line 328: Lexeme: var             Token: IDENTIFIER
Line 328: Lexeme: ^=              Token: INVALID
Line 328: Lexeme: 10              Token: CONSTANT_NUM
Line 329: Lexeme: var             Token: IDENTIFIER
Line 329: Lexeme: ^               Token: ARITHMETIC_OPE
Line 329: Lexeme: 3               Token: CONSTANT_NUM
